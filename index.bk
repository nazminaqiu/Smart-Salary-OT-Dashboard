<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Smart Salary & Overtime Tracker with AI Allocation</title>
    <!-- Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/plugins/monthSelect/style.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        .header {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .header h1 {
            color: #333;
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .header .btn-group {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 15px;
        }
        
        .modal-content .btn-group {
            flex-direction: column;
            gap: 15px;
        }
        
        .modal-content .btn-group .btn {
            width: 100%;
            margin: 0;
        }

        .global-settings {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 20px;
            background: rgba(102, 126, 234, 0.1);
            padding: 15px;
            border-radius: 10px;
        }

        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-title {
            font-size: 1.3em;
            color: #333;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #667eea;
        }

        .stat-value {
            font-size: 2.5em;
            font-weight: bold;
            color: #667eea;
            margin: 10px 0;
        }

        .stat-label {
            color: #666;
            font-size: 0.9em;
        }

        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        .tab {
            background: white;
            padding: 12px 24px;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .tab:hover {
            background: #667eea;
            color: white;
        }

        .tab.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 20px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }
        
        .form-group.checkbox-group {
            flex-direction: row;
            align-items: center;
            gap: 10px;
        }
        .form-group.checkbox-group input {
            width: auto;
        }


        .form-group label {
            margin-bottom: 5px;
            color: #333;
            font-weight: 500;
        }

        .form-group input,
        .form-group select {
            padding: 10px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: transform 0.3s ease;
            margin-right: 10px;
            margin-top: 10px;
        }

        .btn:hover {
            transform: scale(1.05);
        }
        
        .btn-small {
            padding: 5px 10px;
            font-size: 14px;
            margin-top: 0;
        }
        
        #meetTargetBtn {
            padding: 8px 16px;
            font-size: 14px;
            margin-left: 10px;
            margin-top: 0;
            vertical-align: middle;
        }

        .btn-secondary {
            background: #6c757d;
        }

        .btn-danger {
            background: #dc3545;
        }

        .btn-success {
            background: #28a745;
        }

        .btn-warning {
            background: #ffc107;
            color: #333;
        }
        
        .btn-info {
            background: #17a2b8;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th, tfoot td {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px;
            text-align: left;
        }

        #expenseTable th.sortable {
            cursor: pointer;
            position: relative;
        }
        #expenseTable th.sortable::after {
            content: ' ';
            position: absolute;
            right: 8px;
            opacity: 0.5;
            font-size: 0.8em;
        }
        #expenseTable th.sortable.sorted-asc::after {
            content: '▲';
            opacity: 1;
        }
        #expenseTable th.sortable.sorted-desc::after {
            content: '▼';
            opacity: 1;
        }

        td {
            padding: 12px;
            border-bottom: 1px solid #e0e0e0;
        }
        
        td input, td select {
            width: 100%;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        
        .hours-input-group {
            display: flex;
            align-items: center;
        }
        .hours-input-group input {
            text-align: center;
            border-right: none;
            border-left: none;
        }
        .hours-input-group button {
            width: 25px;
            height: 30px;
            border: 1px solid #ccc;
            background: #f0f0f0;
            cursor: pointer;
        }


        tr:hover {
            background: rgba(102, 126, 234, 0.1);
        }
        
        #expenseTableBody td:not(:last-child):not(:nth-child(2)):not(:nth-child(7)) {
             cursor: pointer;
        }


        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        #summary-tab .summary-grid {
             grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        }

        .summary-item {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            padding: 20px;
            border-radius: 10px;
            text-align: center;
        }

        .progress-bar {
            width: 100%;
            height: 30px;
            background: #e0e0e0;
            border-radius: 15px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #667eea, #764ba2);
            transition: width 0.5s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .expense-category {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 5px;
            font-size: 0.9em;
            margin: 2px;
            text-transform: capitalize;
        }

        .category-food { background: #ff9800; color: white; }
        .category-groceries { background: #8bc34a; color: white; }
        .category-transport { background: #2196f3; color: white; }
        .category-utilities { background: #4caf50; color: white; }
        .category-subscriptions { background: #009688; color: white; }
        .category-shopping { background: #9c27b0; color: white; }
        .category-entertainment { background: #e91e63; color: white; }
        .category-health { background: #00bcd4; color: white; }
        .category-personal-care { background: #ffc107; color: #333; }
        .category-family { background: #3f51b5; color: white; }
        .category-gifts { background: #f44336; color: white; }
        .category-others { background: #607d8b; color: white; }
        .category-mortgage-rent { background: #6f42c1; color: white; }
        .category-savings-investments { background: #20c997; color: white; }
        .category-debt-loans { background: #fd7e14; color: white; }

        .alert {
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
        }

        .alert-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }

        .alert-danger {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .alert-info {
            background: #d1ecf1;
            color: #0c5460;
            border: 1px solid #bee5eb;
        }

        .ot-allocation-preview {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-top: 20px;
        }

        .ot-preview-item {
            display: flex;
            justify-content: space-between;
            padding: 8px;
            margin: 5px 0;
            background: white;
            border-radius: 5px;
            border-left: 4px solid #667eea;
        }

        .savings-indicator {
            display: inline-block;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: bold;
            margin-left: 10px;
            vertical-align: middle;
        }

        .savings-good {
            background: #28a745;
            color: white;
        }

        .savings-warning {
            background: #ffc107;
            color: #333;
        }

        .savings-danger {
            background: #dc3545;
            color: white;
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background-color: #28a745;
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
            z-index: 1050;
            opacity: 0;
            transition: opacity 0.5s, top 0.5s;
        }

        .adjuster-group {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            gap: 10px;
        }

        .adjuster-group .btn {
            margin: 0 5px;
        }
        
        #sticky-ot-summary {
            position: -webkit-sticky; /* For Safari */
            position: sticky;
            top: 10px; /* Adjust this value based on your preference */
            z-index: 10;
        }

        .slider-group {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }
        .slider-container {
            display: grid;
            grid-template-columns: 1fr 3fr 1fr auto;
            align-items: center;
            gap: 15px;
            margin-bottom: 10px;
        }
        .slider-container label {
            font-weight: 500;
        }
        .slider-container input[type="range"] {
            -webkit-appearance: none;
            width: 100%;
            height: 8px;
            background: #ddd;
            border-radius: 5px;
            outline: none;
            opacity: 0.7;
            transition: opacity .2s;
        }
        .slider-container input[type="range"]:hover {
            opacity: 1;
        }
        .slider-container input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            background: #667eea;
            cursor: pointer;
            border-radius: 50%;
        }
        .slider-container input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            background: #667eea;
            cursor: pointer;
            border-radius: 50%;
        }
        .percentage-display {
            font-weight: bold;
            color: #667eea;
            text-align: right;
        }
        .percent-adjuster {
            display: flex;
            gap: 5px;
        }
        .percent-adjuster button {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            border: 1px solid #ccc;
            background: #f0f0f0;
            font-weight: bold;
            cursor: pointer;
        }
        #totalPercentage {
            font-weight: bold;
            margin-top: 10px;
            text-align: center;
        }
        
        /* --- WIZARD & MODAL STYLES --- */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            z-index: 1001;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .modal-content {
            background: white;
            padding: 30px 40px;
            border-radius: 20px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            position: relative;
        }
        .modal-close {
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 2em;
            cursor: pointer;
            color: #888;
        }
        .wizard-step h4, .modal-content h2 {
            margin-bottom: 20px;
            font-size: 1.2em;
            color: #333;
        }
        .wizard-step .form-group {
            margin-bottom: 15px;
        }
        
        /* --- ACHIEVEMENTS STYLES --- */
        .achievements-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }
        .achievement-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            text-align: center;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
        }
        .achievement-card.unlocked {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            border-color: #28a745;
        }
        .achievement-icon {
            font-size: 3em;
            margin-bottom: 10px;
        }
        .achievement-card.unlocked .achievement-icon {
            color: #155724;
        }
        .achievement-title {
            font-weight: bold;
            font-size: 1.1em;
            margin-bottom: 5px;
        }
        .achievement-desc {
            font-size: 0.9em;
            color: #6c757d;
        }
        .achievement-card.unlocked .achievement-desc {
            color: #155724;
        }

        @media (max-width: 768px) {
            .header h1 {
                font-size: 1.8em;
            }
            
            .dashboard {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div id="toast-notification" class="toast" style="display: none;"></div>
    <input type="file" id="import-file" accept=".json" style="display: none;">
    <div class="container">
        <div class="header">
            <h1>💼 Advanced Smart Salary & Overtime Tracker</h1>
            <div class="btn-group">
                <button class="btn" onclick="launchWizard()">🚀 Monthly Setup Wizard</button>
                <button class="btn btn-warning" onclick="launchSimulator()">シ What-If Simulator</button>
                <button class="btn btn-info" onclick="triggerImport()">📥 Import Data</button>
                <button class="btn btn-secondary" onclick="exportData()">📤 Export Data</button>
            </div>
            <!-- GLOBAL SETTINGS -->
            <div class="global-settings">
                <div class="form-group">
                    <label>Pay Period</label>
                    <input type="text" id="payPeriod" placeholder="Select Pay Period...">
                </div>
                <div class="form-group">
                    <label>OT Start Date</label>
                    <input type="text" id="otStartDate" placeholder="Select Start Date...">
                </div>
                <div class="form-group">
                    <label>OT End Date</label>
                    <input type="text" id="otEndDate" placeholder="Select End Date...">
                </div>
                 <div class="form-group">
                    <label>Current Month</label>
                    <input type="text" id="currentMonth" readonly style="background: #f0f0f0; text-align: center; font-weight: bold;">
                </div>
            </div>
        </div>

        <div class="dashboard">
            <div class="card">
                <h3 class="card-title">📊 Monthly Summary</h3>
                <div class="stat-value" id="totalIncome">RM 0.00</div>
                <div class="stat-label">Total Income (with OT)</div>
                <div style="margin-top: 15px;">
                    <div class="stat-label">Net Income</div>
                    <div style="font-size: 1.8em; color: #4caf50; font-weight: bold;" id="netIncome">RM 0.00</div>
                </div>
            </div>
            
            <div class="card">
                <h3 class="card-title">🎯 Savings Target Status</h3>
                <div class="stat-value" id="savingsTargetDisplay">RM 0.00</div>
                <div class="stat-label">Target Savings This Month</div>
                <div style="margin-top: 15px;">
                    <div class="stat-label">Actual vs Target</div>
                    <div style="font-size: 1.5em; font-weight: bold;" id="savingsStatus">
                        <span id="savingsActual">RM 0.00</span>
                        <span id="savingsIndicator" class="savings-indicator">On Track</span>
                        <button id="meetTargetBtn" class="btn btn-small btn-warning" onclick="meetSavingsTarget()" style="display: none;">Meet Target</button>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <h3 class="card-title">🔮 Future Outlook (Next Month)</h3>
                <div class="stat-value" id="forecastedIncome">RM 0.00</div>
                <div class="stat-label">Predicted Income</div>
                <div style="margin-top: 15px;">
                    <div class="stat-label">Predicted Expenses</div>
                    <div style="font-size: 1.8em; color: #ff9800; font-weight: bold;" id="forecastedExpenses">RM 0.00</div>
                </div>
            </div>
        </div>

        <div class="tabs">
            <div class="tab active" onclick="switchTab(event, 'salary')">💵 Salary & Auto-Deductions</div>
            <div class="tab" onclick="switchTab(event, 'targets')">🎯 Savings Targets</div>
            <div class="tab" onclick="switchTab(event, 'expenses')">📝 Expenses Tracker</div>
            <div class="tab" onclick="switchTab(event, 'overtime')">⏰ Smart OT Allocator</div>
            <div class="tab" onclick="switchTab(event, 'summary')">📊 Financial Summary</div>
            <div class="tab" onclick="switchTab(event, 'achievements')">🏆 Achievements</div>
        </div>

        <!-- Salary Input Tab -->
        <div id="salary-tab" class="tab-content active">
            <div class="form-section">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h3 class="card-title">Monthly Salary Input with Auto-Deductions</h3>
                    <button class="btn btn-info" onclick="copyLastMonthSalary()">⎘ Copy Last Month's Salary</button>
                </div>
                
                <div class="alert alert-info">
                    ℹ️ Your salary and deduction information is auto-saved whenever you make a change.
                </div>
                
                <div class="form-grid">
                    <div class="form-group">
                        <label>Basic Salary (RM)</label>
                        <input type="number" id="basicSalary" value="3700" step="0.01" oninput="autoCalculateDeductions()">
                    </div>
                    <div class="form-group">
                        <label>Claims (RM)</label>
                        <input type="number" id="claims" placeholder="0.00" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                    <div class="form-group">
                        <label>HP Allowance (RM)</label>
                        <input type="number" id="hpAllowance" value="80" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                    <div class="form-group">
                        <label>Incentive (RM)</label>
                        <input type="number" id="incentive" value="500" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                    <div class="form-group">
                        <label>Bonus (RM)</label>
                        <input type="number" id="bonus" placeholder="0.00" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                    <div class="form-group">
                        <label>Other Income (RM)</label>
                        <input type="number" id="otherIncome" placeholder="0.00" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                </div>
                
                <h4 style="margin-top: 20px; margin-bottom: 15px;">Auto-Calculated Deductions</h4>
                <div class="form-grid">
                    <div class="form-group">
                        <label>EPF (11%) - Auto</label>
                        <input type="number" id="epf" value="407" step="0.01" readonly style="background: #f0f0f0;">
                    </div>
                    <div class="form-group">
                        <label>SOCSO - Auto</label>
                        <input type="number" id="socso" value="29.75" step="0.01" readonly style="background: #f0f0f0;">
                    </div>
                    <div class="form-group">
                        <label>EIS - Auto</label>
                        <input type="number" id="eis" value="11.90" step="0.01" readonly style="background: #f0f0f0;">
                    </div>
                    <div class="form-group">
                        <label>PCB (Tax) - Auto</label>
                        <input type="number" id="pcb" placeholder="0.00" step="0.01" readonly style="background: #f0f0f0;">
                    </div>
                    <div class="form-group">
                        <label>Cash Advance (RM)</label>
                        <input type="number" id="cashAdvance" placeholder="0.00" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                    <div class="form-group">
                        <label>Other Deductions (RM)</label>
                        <input type="number" id="otherDeductions" placeholder="0.00" step="0.01" oninput="updateAndSaveSalary()">
                    </div>
                </div>
                
                <button class="btn btn-secondary" onclick="resetSalaryForm()">Reset Form</button>
            </div>
        </div>

        <!-- Savings Targets Tab -->
        <div id="targets-tab" class="tab-content">
            <div class="form-section">
                <h3 class="card-title">Savings Target Calculator</h3>
                
                <div class="alert alert-success">
                    💡 Set your monthly savings target, and the system will calculate required overtime automatically
                </div>
                
                <div class="form-grid">
                    <div class="form-group">
                        <label>Target Monthly Savings (RM)</label>
                        <input type="number" id="targetSavings" placeholder="How much do you want to save?" step="50">
                    </div>
                    <div class="form-group">
                        <label>Expected Monthly Expenses (RM)</label>
                        <input type="number" id="expectedExpenses" placeholder="Auto-filled from tracker" step="50">
                    </div>
                    <div class="form-group">
                        <label>Emergency Fund Goal (RM)</label>
                        <input type="number" id="emergencyFundGoal" placeholder="Target emergency fund" step="100">
                    </div>
                    <div class="form-group">
                        <label>Current Emergency Fund (RM)</label>
                        <input type="number" id="currentEmergencyFund" placeholder="Current saved amount" step="100">
                    </div>
                </div>
                
                <button class="btn btn-success" onclick="calculateRequiredOT()">Calculate Required OT</button>
                
                <div id="savingsAnalysis" style="margin-top: 30px; display: none;">
                    <h4>Savings Analysis & Recommendations</h4>
                    <div class="alert" id="savingsAlert"></div>
                     <!-- AI COACH SECTION -->
                    <div id="aiCoachSection" class="alert alert-warning" style="display: none;">
                        <h4>💡 AI Savings Coach</h4>
                        <p id="aiCoachText"></p>
                    </div>
                    
                    <div class="summary-grid">
                        <div class="summary-item">
                            <div class="stat-label">Base Net Income</div>
                            <div style="font-size: 1.5em; font-weight: bold;" id="baseNetIncome">RM 0.00</div>
                        </div>
                        <div class="summary-item">
                            <div class="stat-label">After Expenses</div>
                            <div style="font-size: 1.5em; font-weight: bold;" id="afterExpenses">RM 0.00</div>
                        </div>
                        <div class="summary-item">
                            <div class="stat-label">OT Required</div>
                            <div style="font-size: 1.5em; font-weight: bold; color: #ff9800;" id="otRequired">RM 0.00</div>
                        </div>
                        <div class="summary-item">
                            <div class="stat-label">Hours Needed</div>
                            <div style="font-size: 1.5em; font-weight: bold; color: #2196f3;" id="hoursNeeded">0 hrs</div>
                        </div>
                    </div>
                    
                    <button class="btn btn-success" style="margin-top: 20px;" onclick="autoGenerateOTForTarget()">
                        🚀 Auto-Generate OT Schedule
                    </button>
                </div>
                
                <h4 style="margin-top: 30px;">Savings Progress Tracker</h4>
                <div class="progress-bar">
                    <div class="progress-fill" id="savingsProgress" style="width: 0%">0%</div>
                </div>
                
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="stat-label">This Month Saved</div>
                        <div style="font-size: 1.5em; font-weight: bold; color: #4caf50;" id="monthSaved">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">YTD Savings</div>
                        <div style="font-size: 1.5em; font-weight: bold; color: #9c27b0;" id="ytdSavings">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Months to Emergency Fund</div>
                        <div style="font-size: 1.5em; font-weight: bold;" id="monthsToGoal">0</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Expenses Tracker Tab -->
        <div id="expenses-tab" class="tab-content">
            <div class="form-section">
                 <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 10px; margin-bottom: 20px;">
                    <h3 class="card-title" style="margin-bottom: 0;">Expenses Tracker</h3>
                    <div>
                        <button class="btn btn-success" onclick="applyRecurringExpenses()">➕ Apply Recurring</button>
                        <button class="btn btn-info" onclick="copyLastMonthExpenses()">⎘ Copy Last Month's</button>
                    </div>
                </div>
                
                <div class="form-grid">
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" id="expenseDate">
                    </div>
                    <div class="form-group">
                        <label>Category</label>
                        <select id="expenseCategory">
                            <option value="mortgage_rent">🏠 Mortgage or Rent</option>
                            <option value="food">🍔 Food & Dining</option>
                            <option value="groceries">🛒 Groceries</option>
                            <option value="transport">🚗 Transportation</option>
                            <option value="utilities">💡 Utilities & Bills</option>
                            <option value="subscriptions">🔁 Subscriptions</option>
                            <option value="shopping">🛍️ Shopping</option>
                            <option value="entertainment">🎬 Entertainment</option>
                            <option value="health">🏥 Health & Medical</option>
                            <option value="debt_loans">💳 Debt & Loans</option>
                            <option value="personal_care">🧴 Personal Care</option>
                            <option value="family">👨‍👩‍👧‍👦 Family</option>
                            <option value="gifts">🎁 Gifts</option>
                            <option value="savings_investments">💰 Savings & Investments</option>
                            <option value="others">📦 Others</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Your Share (RM)</label>
                        <input type="number" id="expenseAmount" step="0.01" oninput="updateFullAmountInput()">
                    </div>
                     <div class="form-group">
                        <label>Split Payment (RM)</label>
                        <input type="number" id="expenseSplitPayment" step="0.01" oninput="updateFullAmountInput()">
                    </div>
                    <div class="form-group">
                        <label>Full Amount (RM)</label>
                        <input type="number" id="expenseFullAmount" step="0.01" readonly style="background: #f0f0f0;">
                    </div>
                    <div class="form-group">
                        <label>Description</label>
                        <input type="text" id="expenseDescription">
                    </div>
                    <div class="form-group checkbox-group">
                         <label for="isRecurringExpense">Is Recurring?</label>
                        <input type="checkbox" id="isRecurringExpense" style="width: 20px; height: 20px;">
                    </div>
                </div>
                
                <button class="btn" onclick="addExpense()">Add Expense</button>
                
                <table id="expenseTable">
                    <thead>
                        <tr>
                            <th class="sortable" onclick="sortExpenses('date')">Date</th>
                            <th class="sortable" onclick="sortExpenses('category')">Category</th>
                            <th class="sortable" onclick="sortExpenses('description')">Description</th>
                            <th class="sortable" onclick="sortExpenses('amount')">Your Share</th>
                            <th class="sortable" onclick="sortExpenses('splitPayment')">Split Payment</th>
                            <th class="sortable" onclick="sortExpenses('fullAmount')">Full Amount</th>
                            <th>Recurring</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="expenseTableBody">
                    </tbody>
                    <tfoot id="expenseTableFooter">
                    </tfoot>
                </table>
            </div>
        </div>
        
        <!-- Smart OT Allocator Tab -->
        <div id="overtime-tab" class="tab-content">
            <div class="form-section">
                <h3 class="card-title">Smart Overtime Allocator</h3>
                
                <div class="alert alert-info">
                    🤖 The system will intelligently allocate overtime hours to meet your target. The new logic ensures the target is always met if possible.
                </div>
                
                <div class="form-grid">
                    <div class="form-group">
                        <label>Target OT Earnings (RM)</label>
                        <input type="number" id="targetOTEarnings" placeholder="Enter target OT amount" step="0.01" oninput="displayOTEntries()">
                    </div>
                     <div class="form-group">
                        <label>Project/Task Name</label>
                        <input type="text" id="defaultProject" value="PERKESO KASEYA" placeholder="Default project name">
                    </div>
                     <div class="form-group">
                        <label>Allocation Strategy</label>
                        <select id="allocationStrategy">
                            <option value="balanced">Balanced (Default)</option>
                            <option value="front-load-weekends">Front-load Weekends</option>
                            <option value="front-load-weekdays">Front-load Weekdays</option>
                            <option value="back-load">Back-load</option>
                        </select>
                    </div>
                </div>

                <div class="slider-group">
                    <h4>Rate Allocation Percentage</h4>
                    <div class="slider-container">
                        <label for="rate1_0">1.0x (Sunday)</label>
                        <input type="range" id="rate1_0" class="rate-slider" min="0" max="100" value="10">
                        <span id="rate1_0_val" class="percentage-display">10%</span>
                        <div class="percent-adjuster">
                            <button onclick="adjustOTPercentage('rate1_0', -1)">-</button>
                            <button onclick="adjustOTPercentage('rate1_0', 1)">+</button>
                        </div>
                    </div>
                    <div class="slider-container">
                        <label for="rate1_5_weekday">1.5x (Weekday)</label>
                        <input type="range" id="rate1_5_weekday" class="rate-slider" min="0" max="100" value="70">
                        <span id="rate1_5_weekday_val" class="percentage-display">70%</span>
                        <div class="percent-adjuster">
                            <button onclick="adjustOTPercentage('rate1_5_weekday', -1)">-</button>
                            <button onclick="adjustOTPercentage('rate1_5_weekday', 1)">+</button>
                        </div>
                    </div>
                    <div class="slider-container">
                        <label for="rate1_5_saturday">1.5x (Saturday)</label>
                        <input type="range" id="rate1_5_saturday" class="rate-slider" min="0" max="100" value="10">
                        <span id="rate1_5_saturday_val" class="percentage-display">10%</span>
                        <div class="percent-adjuster">
                            <button onclick="adjustOTPercentage('rate1_5_saturday', -1)">-</button>
                            <button onclick="adjustOTPercentage('rate1_5_saturday', 1)">+</button>
                        </div>
                    </div>
                    <div class="slider-container">
                        <label for="rate2_0">2.0x (Public Holiday)</label>
                        <input type="range" id="rate2_0" class="rate-slider" min="0" max="100" value="10">
                        <span id="rate2_0_val" class="percentage-display">10%</span>
                        <div class="percent-adjuster">
                            <button onclick="adjustOTPercentage('rate2_0', -1)">-</button>
                            <button onclick="adjustOTPercentage('rate2_0', 1)">+</button>
                        </div>
                    </div>
                    <div id="totalPercentage">Total: 100%</div>
                </div>

                <button class="btn btn-success" onclick="generateSmartOTAllocation()">🤖 Generate Smart Allocation</button>
                <button class="btn btn-warning" onclick="previewOTAllocation()">👁️ Preview Allocation</button>
                <button class="btn" onclick="applyOTAllocation()">✅ Apply Allocation</button>
                
                <div id="otAllocationPreview" class="ot-allocation-preview" style="display: none;">
                    <h4>Preview: Smart OT Allocation</h4>
                    <div id="previewContent"></div>
                </div>
                
                <div id="sticky-ot-summary" style="display: none;">
                    <div class="form-section" style="padding-bottom: 15px; margin-bottom: 0; border-bottom-left-radius: 0; border-bottom-right-radius: 0;">
                        <h4 class="card-title">📊 OT Hours Adjuster</h4>
                        <div class="summary-grid">
                            <div class="summary-item">
                                <div class="stat-label">Total OT Hours</div>
                                <div style="font-size: 1.5em; font-weight: bold;" id="totalOTHoursSummary">0</div>
                            </div>
                            <div class="summary-item">
                                <div class="stat-label">Total OT Earnings</div>
                                <div style="font-size: 1.5em; font-weight: bold;" id="totalOTEarningsSummary">RM 0.00</div>
                            </div>
                        </div>
                         <div id="otTargetProgressBarContainer" style="margin-top: 15px; display: none;">
                            <div class="progress-bar">
                                <div class="progress-fill" id="otTargetProgress" style="width: 0%; background: linear-gradient(90deg, #28a745, #20c997);">0%</div>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="otAdjuster" class="form-section" style="display: none; margin-top: 0; border-top-left-radius: 0; border-top-right-radius: 0;">
                    <div class="alert alert-info" style="margin-top: 15px;">
                        Use the buttons to proportionally adjust the total hours for each day type.
                    </div>
                    <div class="form-grid" id="otAdjusterGrid">
                        <!-- JS will populate this area -->
                    </div>
                </div>

                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h4 style="margin-top: 30px;">Current OT Entries</h4>
                    <button class="btn btn-small btn-danger" onclick="deleteAllOTEntries()">Delete All</button>
                </div>
                <table id="otTable">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Start</th>
                            <th>End</th>
                            <th>Hours</th>
                            <th>Rate</th>
                            <th>Remarks</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="otTableBody">
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Financial Summary Tab -->
        <div id="summary-tab" class="tab-content">
            <div class="form-section">
                <h3 class="card-title">Financial Summary Dashboard</h3>
                
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="stat-label">Gross Income</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #4caf50;" id="summaryGross">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Total Deductions</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #ff9800;" id="summaryDeductions">RM 0.00</div>
                    </div>
                     <div class="summary-item">
                        <div class="stat-label">Net Income</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #2196f3;" id="summaryNet">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Expenses (Your Share)</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #dc3545;" id="summaryExpenses">RM 0.00</div>
                    </div>
                     <div class="summary-item">
                        <div class="stat-label">Expenses (Full Amount)</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #fd7e14;" id="summaryFullExpenses">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Net Savings</div>
                        <div style="font-size: 1.8em; font-weight: bold; color: #9c27b0;" id="summarySavings">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Savings Rate</div>
                        <div style="font-size: 1.8em; font-weight: bold;" id="savingsRate">0%</div>
                    </div>
                </div>
                
                <h4 style="margin-top: 30px;">Income Breakdown</h4>
                <div class="summary-grid">
                    <div class="summary-item">
                        <div class="stat-label">Basic Salary</div>
                        <div style="font-size: 1.2em; font-weight: bold;" id="incomeBasic">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Overtime</div>
                        <div style="font-size: 1.2em; font-weight: bold;" id="incomeOT">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Allowances</div>
                        <div style="font-size: 1.2em; font-weight: bold;" id="incomeAllowances">RM 0.00</div>
                    </div>
                    <div class="summary-item">
                        <div class="stat-label">Others</div>
                        <div style="font-size: 1.2em; font-weight: bold;" id="incomeOthers">RM 0.00</div>
                    </div>
                </div>
                
                <h4 style="margin-top: 30px;">Expense Breakdown by Category (Your Share)</h4>
                <div id="categoryBreakdown" class="summary-grid"></div>
            </div>
        </div>
        
        <!-- Achievements Tab -->
        <div id="achievements-tab" class="tab-content">
            <div class="form-section">
                <h3 class="card-title">🏆 Achievements</h3>
                <div id="achievementsGrid" class="achievements-grid">
                    <!-- Achievements will be populated by JS -->
                </div>
            </div>
        </div>
    </div>

    <!-- Setup Wizard Modal -->
    <div id="wizard-modal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <span class="modal-close" onclick="closeWizard()">&times;</span>
            <h2 id="wizard-title">🚀 Monthly Setup Wizard</h2>

            <!-- Step 0: Quick Start -->
            <div class="wizard-step" id="wizard-step-0">
                <h4 id="wizard-welcome-title">Welcome to [Month]!</h4>
                <p style="margin-bottom: 25px;">How would you like to start?</p>
                <div class="btn-group">
                    <button class="btn btn-success" onclick="wizardCopyAll()">📋 Copy Last Month's Salary & Expenses</button>
                    <button class="btn btn-info" onclick="wizardApplyRecurring()">🔁 Apply Recurring Expenses Only</button>
                    <button class="btn btn-secondary" onclick="wizardStartFresh()">✨ Start Fresh</button>
                </div>
                <hr style="margin: 20px 0;">
                <p style="text-align: center; margin-bottom: 15px;">Or, continue with the detailed setup:</p>
                <button class="btn" style="width: 100%; margin: 0;" onclick="nextStep(1)">⚙️ Detailed Setup &rarr;</button>
            </div>


            <!-- Step 1: Period and Dates -->
            <div class="wizard-step" id="wizard-step-1" style="display: none;">
                <h4>Step 1: Set Your Pay Period</h4>
                <div class="form-group">
                    <label>Pay Period</label>
                    <input type="text" id="wizardPayPeriod" placeholder="Select Pay Period...">
                </div>
                <div class="form-group">
                    <label>OT Start Date</label>
                    <input type="text" id="wizardOtStartDate" placeholder="Select Start Date...">
                </div>
                <div class="form-group">
                    <label>OT End Date</label>
                    <input type="text" id="wizardOtEndDate" placeholder="Select End Date...">
                </div>
                <button class="btn btn-secondary" onclick="prevStep(0)">&larr; Back</button>
                <button class="btn" onclick="nextStep(2)">Next &rarr;</button>
            </div>
            
            <!-- Step 2: Income Details -->
            <div class="wizard-step" id="wizard-step-2" style="display: none;">
                <h4>Step 2: Your Income Details for the Month</h4>
                <div class="form-grid">
                    <div class="form-group">
                        <label>Basic Salary (RM)</label>
                        <input type="number" id="wizardBasicSalary" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Claims (RM)</label>
                        <input type="number" id="wizardClaims" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>HP Allowance (RM)</label>
                        <input type="number" id="wizardHpAllowance" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Incentive (RM)</label>
                        <input type="number" id="wizardIncentive" step="0.01">
                    </div>
                    <div class="form-group">
                        <label>Other Income (RM)</label>
                        <input type="number" id="wizardOtherIncome" step="0.01">
                    </div>
                </div>
                <button class="btn btn-secondary" onclick="prevStep(1)">&larr; Back</button>
                <button class="btn" onclick="nextStep(3)">Next &rarr;</button>
            </div>

            <!-- Step 3: Savings Goal -->
            <div class="wizard-step" id="wizard-step-3" style="display: none;">
                <h4>Step 3: What is your primary goal this month?</h4>
                <div class="form-group">
                    <label>Target Monthly Savings (RM)</label>
                    <input type="number" id="wizardTargetSavings" placeholder="e.g., 2000" step="50">
                </div>
                <div class="form-group">
                    <label>Expected Monthly Expenses (RM)</label>
                    <input type="number" id="wizardExpectedExpenses" placeholder="e.g., 4500" step="50">
                </div>
                <button class="btn btn-secondary" onclick="prevStep(2)">&larr; Back</button>
                <button class="btn" onclick="nextStep(4)">Next &rarr;</button>
            </div>

            <!-- Step 4: OT Strategy -->
            <div class="wizard-step" id="wizard-step-4" style="display: none;">
                <h4>Step 4: How do you want to earn your overtime?</h4>
                <div class="form-group">
                    <label>Choose your preferred OT strategy for this month:</label>
                    <select id="wizardAllocationStrategy" class="form-group select">
                        <option value="balanced">Balanced (Default)</option>
                        <option value="front-load-weekends">Focus on Weekends</option>
                        <option value="front-load-weekdays">Focus on Weekdays</option>
                        <option value="back-load">Work towards End of Month</option>
                    </select>
                </div>
                <button class="btn btn-secondary" onclick="prevStep(3)">&larr; Back</button>
                <button class="btn" onclick="nextStep(5)">Review Plan</button>
            </div>

            <!-- Step 5: Confirmation -->
            <div class="wizard-step" id="wizard-step-5" style="display: none;">
                <h4>Step 5: Your Plan Summary</h4>
                <div id="wizard-summary" class="alert alert-info">
                    Your summary will be calculated here.
                </div>
                <p>Ready to generate your schedule?</p>
                <button class="btn btn-secondary" onclick="prevStep(4)">&larr; Back</button>
                <button class="btn btn-success" onclick="finishWizard()">✅ Yes, Generate My Plan!</button>
            </div>
        </div>
    </div>
    
    <!-- What-If Simulator Modal -->
    <div id="simulator-modal" class="modal-overlay" style="display: none;">
        <div class="modal-content">
            <span class="modal-close" onclick="closeSimulator()">&times;</span>
            <h2>シ What-If Scenario Simulator</h2>
            <div class="form-grid">
                <div class="form-group">
                    <label>Salary Increase (RM/month)</label>
                    <input type="number" id="simSalaryIncrease" placeholder="e.g., 200" oninput="runSimulation()">
                </div>
                <div class="form-group">
                    <label>New Recurring Expense (RM/month)</label>
                    <input type="number" id="simNewExpense" placeholder="e.g., 600" oninput="runSimulation()">
                </div>
                <div class="form-group">
                    <label>Reduce an Expense Category (%)</label>
                    <select id="simExpenseCategory" onchange="runSimulation()">
                        <!-- Options will be populated by JS -->
                    </select>
                </div>
                <div class="form-group">
                    <label>Reduction Percentage</label>
                    <input type="number" id="simExpenseReduction" placeholder="e.g., 10" oninput="runSimulation()">
                </div>
            </div>
            <div id="simulationResult" class="alert alert-success" style="margin-top: 20px;">
                Enter a value to see the impact on your savings.
            </div>
        </div>
    </div>

    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/plugins/monthSelect/index.js"></script>
    <script>
        // --- WIZARD LOGIC ---
        let currentStep = 0;
        let wizardData = {};
        let wizardStartDatePicker, wizardEndDatePicker, wizardPayPeriodPicker;

        function launchWizard(isNewMonth = false) {
            document.getElementById('wizard-modal').style.display = 'flex';
            currentStep = 0; // Always start at the quick setup step
            
            const [year, month] = currentPayPeriod.split('-').map(Number);
            const monthName = new Date(year, month - 1).toLocaleString('default', { month: 'long' });
            document.getElementById('wizard-welcome-title').textContent = `Welcome to ${monthName}!`;
            document.getElementById('wizard-title').textContent = `🚀 ${monthName} Setup Wizard`;

            if (!isNewMonth) {
                // If not a new month, hide the quick start options and go to step 1
                nextStep(1);
            } else {
                 showStep(0);
            }


            if (!wizardPayPeriodPicker) {
                 wizardPayPeriodPicker = flatpickr("#wizardPayPeriod", {
                    plugins: [
                        new monthSelectPlugin({
                          shorthand: true,
                          dateFormat: "Y-m",
                          altFormat: "F, Y",
                        })
                    ],
                    onChange: function(selectedDates, dateStr, instance) {
                        handleWizardPayPeriodChange();
                    }
                });
            }
            wizardPayPeriodPicker.setDate(document.getElementById('payPeriod').value, false);

            
            if (!wizardStartDatePicker) {
                wizardStartDatePicker = flatpickr("#wizardOtStartDate", {
                    altInput: true, altFormat: "d/m/Y", dateFormat: "Y-m-d",
                    onChange: function(selectedDates, dateStr) {
                        if (wizardEndDatePicker.selectedDates.length > 0 && selectedDates[0] > wizardEndDatePicker.selectedDates[0]) {
                            wizardEndDatePicker.setDate(selectedDates[0], true);
                        }
                        wizardEndDatePicker.set('minDate', dateStr);
                    }
                });
                wizardEndDatePicker = flatpickr("#wizardOtEndDate", {
                    altInput: true, altFormat: "d/m/Y", dateFormat: "Y-m-d"
                });
            }

            handleWizardPayPeriodChange();

            // Pre-fill salary from main page
            document.getElementById('wizardBasicSalary').value = document.getElementById('basicSalary').value || '3700';
            document.getElementById('wizardClaims').value = document.getElementById('claims').value || '';
            document.getElementById('wizardHpAllowance').value = document.getElementById('hpAllowance').value || '80';
            document.getElementById('wizardIncentive').value = document.getElementById('incentive').value || '500';
            document.getElementById('wizardOtherIncome').value = document.getElementById('otherIncome').value || '';
            
            // Pre-fill savings from main page
            document.getElementById('wizardTargetSavings').value = document.getElementById('targetSavings').value || '';
            
            // Pre-fill expenses from previous month if it's a new month setup
            if (isNewMonth) {
                const prevPeriod = getPreviousMonthPeriod(currentPayPeriod);
                const prevExpensesData = localStorage.getItem(`expenses_${prevPeriod}`);
                if (prevExpensesData) {
                    const prevExpenses = JSON.parse(prevExpensesData);
                    const totalPrevExpenses = prevExpenses.reduce((sum, exp) => sum + (exp.fullAmount || exp.amount || 0), 0);
                    if (totalPrevExpenses > 0) {
                        document.getElementById('wizardExpectedExpenses').value = totalPrevExpenses.toFixed(2);
                    }
                } else {
                    document.getElementById('wizardExpectedExpenses').value = document.getElementById('expectedExpenses').value || '';
                }
            } else {
                 document.getElementById('wizardExpectedExpenses').value = document.getElementById('expectedExpenses').value || '';
            }
        }

        function closeWizard() {
            document.getElementById('wizard-modal').style.display = 'none';
             if (!localStorage.getItem(`salaryData_${currentPayPeriod}`)) {
                saveDataForPeriod(currentPayPeriod); 
            }
        }

        function showStep(stepNum) {
            document.querySelectorAll('.wizard-step').forEach(step => step.style.display = 'none');
            document.getElementById(`wizard-step-${stepNum}`).style.display = 'block';
        }

        function handleWizardPayPeriodChange() {
            const payPeriod = document.getElementById('wizardPayPeriod').value;
            if (!payPeriod) return;
            const [year, month] = payPeriod.split('-').map(Number);
            const otStartDate = new Date(year, month - 3, 26);
            const otEndDate = new Date(year, month - 2, 25);
            wizardStartDatePicker.setDate(otStartDate, true);
            wizardEndDatePicker.setDate(otEndDate, true);
        }

        function nextStep(stepNum) {
            if (currentStep === 1) {
                wizardData.payPeriod = document.getElementById('wizardPayPeriod').value;
                wizardData.otStartDate = document.getElementById('wizardOtStartDate').value;
                wizardData.otEndDate = document.getElementById('wizardOtEndDate').value;
                if (!wizardData.payPeriod || !wizardData.otStartDate || !wizardData.otEndDate) {
                    alert('Please select the pay period and OT dates.');
                    return;
                }
            }
            if (currentStep === 2) {
                wizardData.basicSalary = parseFloat(document.getElementById('wizardBasicSalary').value) || 0;
                wizardData.claims = parseFloat(document.getElementById('wizardClaims').value) || 0;
                wizardData.hpAllowance = parseFloat(document.getElementById('wizardHpAllowance').value) || 0;
                wizardData.incentive = parseFloat(document.getElementById('wizardIncentive').value) || 0;
                wizardData.otherIncome = parseFloat(document.getElementById('wizardOtherIncome').value) || 0;
            }
            if (currentStep === 3) {
                wizardData.targetSavings = parseFloat(document.getElementById('wizardTargetSavings').value) || 0;
                wizardData.expectedExpenses = parseFloat(document.getElementById('wizardExpectedExpenses').value) || 0;
                if (wizardData.targetSavings <= 0) {
                    alert('Please enter a valid savings target.');
                    return;
                }
            }
            if (currentStep === 4) {
                wizardData.strategy = document.getElementById('wizardAllocationStrategy').value;
                generateWizardSummary();
            }
            currentStep = stepNum;
            showStep(currentStep);
        }

        function prevStep(stepNum) {
            currentStep = stepNum;
            showStep(currentStep);
        }
        
        function calculateTempDeductions(basic) {
            const epf = basic * 0.11;
            let socso = 0;
            if (basic <= 4000) socso = 29.75; else if (basic <= 5000) socso = 39.75; else socso = 49.75;
            const eis = basic * 0.002;
            let pcb = 0;
            const annualBasic = basic * 12;
            if (annualBasic > 35000) {
                if (annualBasic <= 50000) pcb = (annualBasic - 35000) * 0.08 / 12;
                else pcb = ((annualBasic - 70000) * 0.21 + 4000) / 12;
            }
            return { epf, socso, eis, pcb };
        }

        function generateWizardSummary() {
            const tempDeductions = calculateTempDeductions(wizardData.basicSalary);
            const baseNetIncome = (wizardData.basicSalary + wizardData.claims + wizardData.hpAllowance + wizardData.incentive + wizardData.otherIncome) - (tempDeductions.epf + tempDeductions.socso + tempDeductions.eis + tempDeductions.pcb);
            const afterExpenses = baseNetIncome - wizardData.expectedExpenses;
            const otRequired = Math.max(0, wizardData.targetSavings - afterExpenses);
            wizardData.otRequired = otRequired;
            const summaryDiv = document.getElementById('wizard-summary');
            summaryDiv.innerHTML = `
                For Pay Period <strong>${wizardData.payPeriod}</strong>...<br>
                To save <strong>RM ${wizardData.targetSavings.toFixed(2)}</strong>...<br>
                ...with expected expenses of <strong>RM ${wizardData.expectedExpenses.toFixed(2)}</strong>...<br>
                You will need to earn <strong>~RM ${otRequired.toFixed(2)}</strong> from Overtime.<br><br>
                Your chosen strategy is: <strong>${wizardData.strategy.replace(/-/g, ' ')}</strong>.
            `;
        }

        async function finishWizard() {
            document.getElementById('payPeriod').value = wizardData.payPeriod;
            
            saveDataForPeriod(currentPayPeriod);
            currentPayPeriod = wizardData.payPeriod;
            loadDataForPeriod(currentPayPeriod);

            startDatePicker.setDate(wizardData.otStartDate, true);
            endDatePicker.setDate(wizardData.otEndDate, true);

            document.getElementById('basicSalary').value = wizardData.basicSalary;
            document.getElementById('claims').value = wizardData.claims;
            document.getElementById('hpAllowance').value = wizardData.hpAllowance;
            document.getElementById('incentive').value = wizardData.incentive;
            document.getElementById('otherIncome').value = wizardData.otherIncome;
            autoCalculateDeductions();

            document.getElementById('targetSavings').value = wizardData.targetSavings;
            document.getElementById('expectedExpenses').value = wizardData.expectedExpenses;
            updateAndSaveSavingsGoals();
            
            document.getElementById('targetOTEarnings').value = wizardData.otRequired.toFixed(2);
            document.getElementById('allocationStrategy').value = wizardData.strategy;
            updateSlidersForStrategy(wizardData.strategy);
            
            closeWizard();
            
            // Call auto-generation function directly without timeout
            autoGenerateOTForTarget();

            showToast('🚀 Your monthly plan is set and your OT has been allocated!');
        }
        
        function wizardCopyAll() {
            copyLastMonthSalary(true); // silent = true
            copyLastMonthExpenses(true); // silent = true
            showToast("Last month's data copied successfully!");
            closeWizard();
        }

        function wizardApplyRecurring() {
            applyRecurringExpenses();
            closeWizard();
        }
        
        function wizardStartFresh() {
            closeWizard();
        }

        
        // --- SIMULATOR LOGIC ---
        function launchSimulator() {
            const categorySelect = document.getElementById('simExpenseCategory');
            categorySelect.innerHTML = '<option value="">Select Category</option>';
            const categories = [...new Set(expenses.map(e => e.category))];
            categories.forEach(cat => {
                const option = document.createElement('option');
                option.value = cat;
                option.textContent = cat.charAt(0).toUpperCase() + cat.slice(1);
                categorySelect.appendChild(option);
            });
            document.getElementById('simulator-modal').style.display = 'flex';
            runSimulation();
        }

        function closeSimulator() {
            document.getElementById('simulator-modal').style.display = 'none';
        }

        function runSimulation() {
            const salaryIncrease = parseFloat(document.getElementById('simSalaryIncrease').value) || 0;
            const newExpense = parseFloat(document.getElementById('simNewExpense').value) || 0;
            const categoryToReduce = document.getElementById('simExpenseCategory').value;
            const reductionPercent = parseFloat(document.getElementById('simExpenseReduction').value) || 0;

            const totalOT = overtimeEntries.reduce((sum, e) => sum + e.amount, 0);
            const grossIncome = salaryData.basic + salaryData.claims + salaryData.hpAllowance + salaryData.incentive + salaryData.bonus + (salaryData.otherIncome || 0) + totalOT;
            const totalDeductions = salaryData.epf + salaryData.socso + salaryData.eis + salaryData.pcb + salaryData.cashAdvance + salaryData.otherDeductions;
            
            const currentNetIncome = grossIncome - totalDeductions;
            let currentTotalExpenses = expenses.reduce((sum, e) => sum + e.amount, 0);
            
            const simNetIncome = currentNetIncome + salaryIncrease;
            let expenseReduction = 0;
            if (categoryToReduce && reductionPercent > 0) {
                const categoryTotal = expenses.filter(e => e.category === categoryToReduce).reduce((sum, e) => sum + e.amount, 0);
                expenseReduction = categoryTotal * (reductionPercent / 100);
            }
            const simTotalExpenses = currentTotalExpenses + newExpense - expenseReduction;
            
            const originalSavings = currentNetIncome - currentTotalExpenses;
            const simulatedSavings = simNetIncome - simTotalExpenses;
            const difference = simulatedSavings - originalSavings;

            const resultDiv = document.getElementById('simulationResult');
            resultDiv.innerHTML = `
                Original Monthly Savings: <strong>RM ${originalSavings.toFixed(2)}</strong><br>
                Simulated Monthly Savings: <strong>RM ${simulatedSavings.toFixed(2)}</strong><br>
                Impact: <strong style="color: ${difference >= 0 ? 'green' : 'red'};">
                ${difference >= 0 ? '+' : ''}RM ${difference.toFixed(2)}
                </strong>
            `;
        }

        // --- PRE-LOADED DATA FROM JSON ---
        const preloadedExpenses = {
            "2025-08": [{"id":"exp_1755107231614","date":"2025-08-31","description":"Home","category":"others","amount":2181, "fullAmount": 2181},{"id":"exp_1755107268364","date":"2025-08-31","description":"Loan 1","category":"others","amount":1840, "fullAmount": 1840},{"id":"exp_1755107284788","date":"2025-08-31","description":"Loan 2","category":"others","amount":920, "fullAmount": 920},{"id":"exp_1755107309938","date":"2025-08-31","description":"Car","category":"others","amount":910, "fullAmount": 910},{"id":"exp_1755107400698","date":"2025-08-31","description":"Minyak","category":"transport","amount":300, "fullAmount": 600},{"id":"exp_1755107782438","date":"2025-08-31","description":"Fateh","category":"others","amount":300, "fullAmount": 300},{"id":"exp_1755107414568","date":"2025-08-31","description":"Toll","category":"transport","amount":150, "fullAmount": 300},{"id":"exp_1755107360933","date":"2025-08-31","description":"Itsu","category":"others","amount":106, "fullAmount": 106},{"id":"exp_1755107740522","date":"2025-08-31","description":"CIMB CC","category":"others","amount":100, "fullAmount": 100},{"id":"exp_1755107651761","date":"2025-08-31","description":"Postpaid","category":"utilities","amount":89, "fullAmount": 89},{"id":"exp_1755107376888","date":"2025-08-31","description":"Coway","category":"utilities","amount":78, "fullAmount": 78},{"id":"exp_1755107514949","date":"2025-08-31","description":"Pengasuh","category":"others","amount":0, "fullAmount": 300},{"id":"exp_1755107629864","date":"2025-08-31","description":"TNB & Air","category":"utilities","amount":0, "fullAmount": 200},{"id":"exp_1755107662986","date":"2025-08-31","description":"Wifi","category":"utilities","amount":0, "fullAmount": 72}],
            "2025-09": [{"id":"exp_1755110548441_0.1535152303401357","date":"2025-09-30","description":"Home","category":"others","amount":2181, "fullAmount": 2181},{"id":"exp_1755110548442_0.26081049781027876","date":"2025-09-30","description":"Loan 1","category":"others","amount":1840, "fullAmount": 1840},{"id":"exp_1755110548442_0.8719881450271281","date":"2025-09-30","description":"Loan 2","category":"others","amount":920, "fullAmount": 920},{"id":"exp_1755110548442_0.5319135290734891","date":"2025-09-30","description":"Car","category":"others","amount":910, "fullAmount": 910},{"id":"exp_1755110548442_0.4004267685005841","date":"2025-09-30","description":"Minyak","category":"transport","amount":300, "fullAmount": 600},{"id":"exp_1755110548442_0.7398356589484054","date":"2025-09-30","description":"Susu & pampers","category":"others","amount":300, "fullAmount": 300},{"id":"exp_1755110548442_0.14505481662788278","date":"2025-09-30","description":"Toll","category":"transport","amount":150, "fullAmount": 300},{"id":"exp_1755110548442_0.41615115981992246","date":"2025-09-30","description":"Itsu","category":"others","amount":106, "fullAmount": 106},{"id":"exp_1755110548442_0.48509588256587","date":"2025-09-30","description":"CIMB CC","category":"others","amount":100, "fullAmount": 100},{"id":"exp_1755110548442_0.7952201204395767","date":"2025-09-30","description":"Postpaid","category":"utilities","amount":89, "fullAmount": 89},{"id":"exp_1755110548442_0.2835309501562463","date":"2025-09-30","description":"Coway","category":"utilities","amount":78, "fullAmount": 78},{"id":"exp_1755110548442_0.13810928182931959","date":"2025-09-30","description":"Pengasuh","category":"others","amount":0, "fullAmount": 300},{"id":"exp_1755110548442_0.3564926611970036","date":"2025-09-30","description":"TNB & Air","category":"utilities","amount":0, "fullAmount": 200},{"id":"exp_1755110548442_0.996422711318759","date":"2025-09-30","description":"Wifi","category":"utilities","amount":0, "fullAmount": 72}]
        };

        const publicHolidays = {
            '2025': ['2025-01-01', '2025-01-29', '2025-01-30', '2025-02-01', '2025-02-12', '2025-03-31', '2025-05-01', '2025-05-12', '2025-06-02', '2025-06-07', '2025-08-31', '2025-09-16', '2025-12-25'],
            '2026': ['2026-01-01', '2026-02-17', '2026-02-18', '2026-03-20', '2026-03-21', '2026-05-01', '2026-05-26', '2026-06-01', '2026-05-28', '2026-06-17', '2026-08-31', '2026-09-16', '2026-08-26', '2026-10-21', '2026-12-25'],
            '2027': ['2027-01-01', '2027-02-06', '2027-02-07', '2027-03-10', '2027-03-11', '2027-05-01', '2027-05-15', '2027-06-07', '2027-05-17', '2027-06-06', '2027-08-31', '2027-09-16', '2027-08-15', '2027-11-09', '2027-12-25']
        };
        
        const strategyPresets = {
            'balanced': { rate1_0: 10, rate1_5_weekday: 60, rate1_5_saturday: 20, rate2_0: 10 },
            'front-load-weekends': { rate1_0: 40, rate1_5_weekday: 10, rate1_5_saturday: 40, rate2_0: 10 },
            'front-load-weekdays': { rate1_0: 5, rate1_5_weekday: 85, rate1_5_saturday: 5, rate2_0: 5 }
        };
        
        const achievements = {
            'firstSavings': { title: 'First Step', desc: 'Set your first savings goal.', icon: '🌱', unlocked: false },
            'otChampion': { title: 'OT Champion', desc: 'Log over 60 hours of overtime in a month.', icon: '💪', unlocked: false },
            'budgetBoss': { title: 'Budget Boss', desc: 'Keep total expenses below your expected amount.', icon: '📊', unlocked: false },
            'savingsStreak': { title: 'Savings Streak', desc: 'Hit your savings goal 3 months in a row.', icon: '🔥', unlocked: false },
            'emergencyReady': { title: 'Emergency Ready', desc: 'Fully fund your emergency goal.', icon: '🛡️', unlocked: false }
        };

        // Data storage
        let salaryData = {};
        let savingsGoalsData = {};
        let overtimeEntries = [];
        let expenses = [];
        let recurringExpenses = [];
        let savingsTarget = 0;
        let previewedOTEntries = [];
        let unlockedAchievements = {};
        let currentPayPeriod = '';
        let startDatePicker, endDatePicker, payPeriodPicker;
        let expenseSortColumn = 'date';
        let expenseSortDirection = 'desc';
        let manualExpenseSet = false;

        const generateId = () => 'id_' + Math.random().toString(36).substr(2, 9);
        
        function getMonthKey(date) {
            // This function now correctly formats the month key without timezone issues.
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            return `${year}-${month}`; // YYYY-MM
        }

        function initializeData() {
            const now = new Date();
            currentPayPeriod = getMonthKey(now);
            
            // Check if it's the first time loading this month
            const isNewMonthSetup = !localStorage.getItem(`salaryData_${currentPayPeriod}`);

            initializeDatePickers();
            initializeMonthPickers();
            
            // Load global data once
            const savedRecurring = localStorage.getItem('recurringExpenses');
            recurringExpenses = savedRecurring ? JSON.parse(savedRecurring) : [];

            const savedAchievements = localStorage.getItem('unlockedAchievements');
            if (savedAchievements) {
                unlockedAchievements = JSON.parse(savedAchievements);
            }
            
            // Load data for the current period
            loadDataForPeriod(currentPayPeriod);
            
            document.getElementById('expenseDate').valueAsDate = new Date();
            
            updateAllDisplays();
            runForecast();
            checkAchievements();

            if (isNewMonthSetup) {
                launchWizard(true); // Launch with isNewMonth flag
            }
        }
        
        function handlePayPeriodChange() {
            saveDataForPeriod(currentPayPeriod);
            currentPayPeriod = document.getElementById('payPeriod').value;
            loadDataForPeriod(currentPayPeriod);
            updateAllDisplays();
        }

        function loadDataForPeriod(period) {
            manualExpenseSet = false; // Reset manual override flag on month change
            const savedSalary = localStorage.getItem(`salaryData_${period}`);
            const savedOT = localStorage.getItem(`overtimeEntries_${period}`);
            const savedExpenses = localStorage.getItem(`expenses_${period}`);
            const savedSavingsGoals = localStorage.getItem(`savingsGoalsData_${period}`);
            
            salaryData = savedSalary ? JSON.parse(savedSalary) : { basic: 3700, claims: 0, hpAllowance: 80, incentive: 500, bonus: 0, otherIncome: 0, epf: 407, socso: 29.75, eis: 11.90, pcb: 0, cashAdvance: 0, otherDeductions: 0 };
            overtimeEntries = savedOT ? JSON.parse(savedOT) : [];
            expenses = savedExpenses ? JSON.parse(savedExpenses) : (preloadedExpenses[period] ? JSON.parse(JSON.stringify(preloadedExpenses[period])) : []);
            savingsGoalsData = savedSavingsGoals ? JSON.parse(savedSavingsGoals) : { targetSavings: 0, expectedExpenses: 0, emergencyFundGoal: 0, currentEmergencyFund: 0 };
            savingsTarget = savingsGoalsData.targetSavings || 0;

            document.getElementById('basicSalary').value = salaryData.basic || 3700;
            document.getElementById('claims').value = salaryData.claims || '';
            document.getElementById('hpAllowance').value = salaryData.hpAllowance || 80;
            document.getElementById('incentive').value = salaryData.incentive || 500;
            document.getElementById('bonus').value = salaryData.bonus || '';
            document.getElementById('otherIncome').value = salaryData.otherIncome || '';
            document.getElementById('cashAdvance').value = salaryData.cashAdvance || '';
            document.getElementById('otherDeductions').value = salaryData.otherDeductions || '';
            document.getElementById('targetSavings').value = savingsGoalsData.targetSavings || '';
            document.getElementById('expectedExpenses').value = savingsGoalsData.expectedExpenses || '';
            document.getElementById('emergencyFundGoal').value = savingsGoalsData.emergencyFundGoal || '';
            document.getElementById('currentEmergencyFund').value = savingsGoalsData.currentEmergencyFund || '';
            
            if (salaryData.customOtStartDate && salaryData.customOtEndDate) {
                startDatePicker.setDate(salaryData.customOtStartDate, false);
                endDatePicker.setDate(salaryData.customOtEndDate, false);
            } else {
                setDefaultOtDates();
            }
            
            const [year, month] = period.split('-').map(Number);
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
            document.getElementById('currentMonth').value = `${months[month - 1]} ${year}`;
        }

        function saveDataForPeriod(period) {
            salaryData.customOtStartDate = document.getElementById('otStartDate').value;
            salaryData.customOtEndDate = document.getElementById('otEndDate').value;
            
            localStorage.setItem(`salaryData_${period}`, JSON.stringify(salaryData));
            localStorage.setItem(`overtimeEntries_${period}`, JSON.stringify(overtimeEntries));
            localStorage.setItem(`expenses_${period}`, JSON.stringify(expenses));
            localStorage.setItem(`savingsGoalsData_${period}`, JSON.stringify(savingsGoalsData));
        }
        
        function updateAllDisplays() {
            autoCalculateDeductions();
            displayOTEntries();
            displayExpenses();
            updateDashboard();
            updateSummary();
            displayAchievements();
        }
        
        function setDefaultOtDates() {
            const payPeriod = document.getElementById('payPeriod').value;
            const [year, month] = payPeriod.split('-').map(Number);
            const otStartDate = new Date(year, month - 3, 26);
            const otEndDate = new Date(year, month - 2, 25);
            
            startDatePicker.setDate(otStartDate, true);
            endDatePicker.setDate(otEndDate, true);
        }

        function autoCalculateDeductions() {
            const basic = parseFloat(document.getElementById('basicSalary').value) || 0;
            const epf = basic * 0.11;
            document.getElementById('epf').value = epf.toFixed(2);
            let socso = 0;
            if (basic <= 4000) socso = 29.75;
            else if (basic <= 5000) socso = 39.75;
            else socso = 49.75;
            document.getElementById('socso').value = socso.toFixed(2);
            const eis = basic * 0.002;
            document.getElementById('eis').value = eis.toFixed(2);
            let pcb = 0;
            const annualBasic = basic * 12;
            if (annualBasic > 35000) {
                if (annualBasic <= 50000) pcb = (annualBasic - 35000) * 0.08 / 12;
                else pcb = ((annualBasic - 70000) * 0.21 + 4000) / 12;
            }
            document.getElementById('pcb').value = pcb.toFixed(2);
            updateAndSaveSalary();
        }
        
        function switchTab(event, tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            event.target.classList.add('active');
            document.getElementById(`${tabName}-tab`).classList.add('active');
            if (tabName === 'summary') updateSummary();
        }
        
        function updateAndSaveSalary() {
            salaryData.basic = parseFloat(document.getElementById('basicSalary').value) || 0;
            salaryData.claims = parseFloat(document.getElementById('claims').value) || 0;
            salaryData.hpAllowance = parseFloat(document.getElementById('hpAllowance').value) || 0;
            salaryData.incentive = parseFloat(document.getElementById('incentive').value) || 0;
            salaryData.bonus = parseFloat(document.getElementById('bonus').value) || 0;
            salaryData.otherIncome = parseFloat(document.getElementById('otherIncome').value) || 0;
            salaryData.epf = parseFloat(document.getElementById('epf').value) || 0;
            salaryData.socso = parseFloat(document.getElementById('socso').value) || 0;
            salaryData.eis = parseFloat(document.getElementById('eis').value) || 0;
            salaryData.pcb = parseFloat(document.getElementById('pcb').value) || 0;
            salaryData.cashAdvance = parseFloat(document.getElementById('cashAdvance').value) || 0;
            salaryData.otherDeductions = parseFloat(document.getElementById('otherDeductions').value) || 0;
            saveDataForPeriod(currentPayPeriod);
            updateDashboard();
        }

        function updateAndSaveSavingsGoals() {
            savingsGoalsData.targetSavings = parseFloat(document.getElementById('targetSavings').value) || 0;
            savingsGoalsData.expectedExpenses = parseFloat(document.getElementById('expectedExpenses').value) || 0;
            savingsGoalsData.emergencyFundGoal = parseFloat(document.getElementById('emergencyFundGoal').value) || 0;
            savingsGoalsData.currentEmergencyFund = parseFloat(document.getElementById('currentEmergencyFund').value) || 0;
            savingsTarget = savingsGoalsData.targetSavings;
            saveDataForPeriod(currentPayPeriod);
            checkAchievements();
            updateDashboard(); // Ensure dashboard updates when expected expenses change
        }
        
        function resetSalaryForm() {
            document.getElementById('basicSalary').value = 3700;
            document.getElementById('claims').value = '';
            document.getElementById('bonus').value = '';
            document.getElementById('otherIncome').value = '';
            document.getElementById('cashAdvance').value = '';
            document.getElementById('otherDeductions').value = '';
            autoCalculateDeductions();
        }

        let debounceTimer;
        
        const debouncedAllocation = debounce(handleRealtimeAllocation, 500);

        function debounce(func, delay) {
            return function(...args) {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => func.apply(this, args), delay);
            };
        }
        
        function updateSlidersForStrategy(strategy) {
            const presets = strategyPresets[strategy];
            if (!presets) return;

            document.getElementById('rate1_0').value = presets.rate1_0;
            document.getElementById('rate1_5_weekday').value = presets.rate1_5_weekday;
            document.getElementById('rate1_5_saturday').value = presets.rate1_5_saturday;
            document.getElementById('rate2_0').value = presets.rate2_0;

            document.getElementById('rate1_0_val').textContent = `${presets.rate1_0}%`;
            document.getElementById('rate1_5_weekday_val').textContent = `${presets.rate1_5_weekday}%`;
            document.getElementById('rate1_5_saturday_val').textContent = `${presets.rate1_5_saturday}%`;
            document.getElementById('rate2_0_val').textContent = `${presets.rate2_0}%`;

            updateTotalPercentage();
            handleRealtimeAllocation();
        }

        function handleRealtimeAllocation() {
            const totalTargetEarnings = parseFloat(document.getElementById('targetOTEarnings').value) || 0;
            if (totalTargetEarnings <= 0) {
                if (overtimeEntries.length > 0) {
                     overtimeEntries = [];
                     saveDataForPeriod(currentPayPeriod);
                     displayOTEntries();
                     updateDashboard();
                }
                return;
            }
            generateSmartOTAllocation(true);
            applyOTAllocation(true);
        }
        
        function initializeDatePickers() {
            startDatePicker = flatpickr("#otStartDate", {
                altInput: true, altFormat: "d/m/Y", dateFormat: "Y-m-d",
                onChange: function(selectedDates, dateStr) {
                    if (endDatePicker.selectedDates.length > 0 && selectedDates[0] > endDatePicker.selectedDates[0]) {
                        endDatePicker.setDate(selectedDates[0], true);
                    }
                    endDatePicker.set('minDate', dateStr);
                    saveDataForPeriod(currentPayPeriod);
                }
            });
            endDatePicker = flatpickr("#otEndDate", {
                altInput: true, altFormat: "d/m/Y", dateFormat: "Y-m-d",
                 onChange: function(selectedDates, dateStr) {
                    saveDataForPeriod(currentPayPeriod);
                }
            });
        }

        function initializeMonthPickers() {
            payPeriodPicker = flatpickr("#payPeriod", {
                plugins: [
                    new monthSelectPlugin({
                      shorthand: true,
                      dateFormat: "Y-m",
                      altFormat: "F, Y",
                    })
                ],
                onChange: function(selectedDates, dateStr, instance) {
                    handlePayPeriodChange();
                }
            });
            payPeriodPicker.setDate(currentPayPeriod, false);
        }
        
        function initializeSliders() {
            const sliders = Array.from(document.querySelectorAll('.rate-slider'));
            
            sliders.forEach(slider => {
                slider.addEventListener('input', (e) => {
                    const changedSlider = e.target;
                    const newValue = parseInt(changedSlider.value);
                    const oldValue = parseInt(changedSlider.dataset.oldValue || newValue);
                    const diff = oldValue - newValue;

                    let otherSliders = sliders.filter(s => s !== changedSlider);
                    let totalOtherValue = otherSliders.reduce((sum, s) => sum + parseInt(s.dataset.oldValue || s.value), 0);
                    
                    if (totalOtherValue > 0) {
                        otherSliders.forEach(s => {
                            const originalVal = parseInt(s.dataset.oldValue || s.value);
                            const proportion = originalVal / totalOtherValue;
                            s.value = originalVal + (diff * proportion);
                        });
                    } else if (otherSliders.length > 0) { // If other sliders are all zero
                        const share = diff / otherSliders.length;
                        otherSliders.forEach(s => s.value = parseInt(s.value) + share);
                    }
                   
                    // Normalize to ensure total is 100
                    let total = sliders.reduce((sum, s) => sum + Math.round(parseFloat(s.value)), 0);
                    let roundingError = 100 - total;
                    if(roundingError !== 0) {
                        let sliderToAdjust = sliders.find(s => (Math.round(parseFloat(s.value)) + roundingError) >= 0 && (Math.round(parseFloat(s.value)) + roundingError) <= 100) || changedSlider;
                        sliderToAdjust.value = Math.round(parseFloat(sliderToAdjust.value)) + roundingError;
                    }

                    sliders.forEach(s => {
                        s.dataset.oldValue = s.value;
                        document.getElementById(`${s.id}_val`).textContent = `${Math.round(parseFloat(s.value))}%`;
                    });

                    updateTotalPercentage();
                    debouncedAllocation();
                });

                slider.addEventListener('mousedown', (e) => {
                    // Set old value on mouse down
                    sliders.forEach(s => s.dataset.oldValue = s.value);
                });
            });

            document.getElementById('targetOTEarnings').addEventListener('input', debouncedAllocation);
            document.getElementById('allocationStrategy').addEventListener('change', (event) => {
                updateSlidersForStrategy(event.target.value);
            });
            updateSlidersForStrategy(document.getElementById('allocationStrategy').value);
        }

        function adjustOTPercentage(rateKey, amount) {
            const sliders = Array.from(document.querySelectorAll('.rate-slider'));
            const currentSlider = document.getElementById(rateKey);
            if (!currentSlider) return;

            let currentValue = parseInt(currentSlider.value);
            let newValue = currentValue + amount;

            if (newValue < 0 || newValue > 100) return;

            let otherSliders = sliders.filter(s => s.id !== rateKey);

            if (amount > 0) { // Increasing current, need to decrease another
                let largestOther = otherSliders.filter(s => parseInt(s.value) > 0).sort((a, b) => parseInt(b.value) - parseInt(a.value))[0];
                if (largestOther) {
                    largestOther.value = parseInt(largestOther.value) - 1;
                    currentSlider.value = newValue;
                }
            } else { // Decreasing current, need to increase another
                let smallestOther = otherSliders.sort((a, b) => parseInt(a.value) - parseInt(b.value))[0];
                 if (parseInt(smallestOther.value) < 100) {
                    smallestOther.value = parseInt(smallestOther.value) + 1;
                    currentSlider.value = newValue;
                }
            }

            sliders.forEach(s => {
                document.getElementById(`${s.id}_val`).textContent = `${s.value}%`;
            });

            updateTotalPercentage();
            debouncedAllocation();
        }


        function updateTotalPercentage() {
            const sliders = document.querySelectorAll('.rate-slider');
            let total = 0;
            sliders.forEach(slider => {
                total += parseInt(slider.value);
            });
            const totalDisplay = document.getElementById('totalPercentage');
            totalDisplay.textContent = `Total: ${total}%`;
            totalDisplay.style.color = (total !== 100) ? 'red' : 'green';
        }

        function generateSmartOTAllocation(isSilent = false) {
            const totalTargetEarnings = parseFloat(document.getElementById('targetOTEarnings').value) || 0;
            const project = document.getElementById('defaultProject').value || 'General OT';
            const startDate = document.getElementById('otStartDate').value;
            const endDate = document.getElementById('otEndDate').value;
            const strategy = document.getElementById('allocationStrategy').value;

            if (!isSilent && !totalTargetEarnings) {
                alert('Please enter target earnings.');
                return;
            }
            if (!isSilent && (!startDate || !endDate)) {
                alert('Please select a valid date range.');
                return;
            }

            let percentages = {
                '1.0': parseInt(document.getElementById('rate1_0').value),
                '1.5_weekday': parseInt(document.getElementById('rate1_5_weekday').value),
                '1.5_saturday': parseInt(document.getElementById('rate1_5_saturday').value),
                '2.0': parseInt(document.getElementById('rate2_0').value)
            };

            // Pre-check for available day types
            const availableRates = getAvailableRates(startDate, endDate);
            let totalAvailablePercentage = 0;
            let moneyToRedistribute = 0;

            for (const rateKey in percentages) {
                 const rate = parseFloat(rateKey.split('_')[0]);
                 if (availableRates.includes(rate)) {
                    totalAvailablePercentage += percentages[rateKey];
                } else {
                    moneyToRedistribute += totalTargetEarnings * (percentages[rateKey] / 100);
                    percentages[rateKey] = 0;
                }
            }

            // Redistribute money from unavailable day types
            if (moneyToRedistribute > 0 && totalAvailablePercentage > 0) {
                for (const rateKey in percentages) {
                    if (percentages[rateKey] > 0) {
                        const proportion = percentages[rateKey] / totalAvailablePercentage;
                        percentages[rateKey] += proportion * (moneyToRedistribute / totalTargetEarnings * 100);
                    }
                }
            }

            const targetEarningsByRate = {
                '1.0': totalTargetEarnings * (percentages['1.0'] / 100),
                '1.5_weekday': totalTargetEarnings * (percentages['1.5_weekday'] / 100),
                '1.5_saturday': totalTargetEarnings * (percentages['1.5_saturday'] / 100),
                '2.0': totalTargetEarnings * (percentages['2.0'] / 100)
            };

            previewedOTEntries = [];
            for (const rateKey in targetEarningsByRate) {
                const targetForRate = targetEarningsByRate[rateKey];
                if (targetForRate > 0) {
                    const rate = parseFloat(rateKey.split('_')[0]);
                    const dayType = rateKey.includes('_') ? rateKey.split('_')[1] : null;
                    const entriesForRate = allocateOTHours(targetForRate, project, startDate, endDate, strategy, rate, dayType, isSilent);
                    previewedOTEntries.push(...entriesForRate);
                }
            }
            
            if (!isSilent) displayOTPreview(totalTargetEarnings);
        }

        function getAvailableRates(startDateStr, endDateStr) {
            const rates = new Set();
            let currentDate = new Date(startDateStr);
            const endDate = new Date(endDateStr);
             while (currentDate <= endDate) {
                const dayOfWeek = currentDate.getDay();
                const dateStr = currentDate.toISOString().split('T')[0];
                const year = currentDate.getFullYear().toString();
                if (publicHolidays[year] && publicHolidays[year].includes(dateStr)) {
                    rates.add(2.0);
                } else if (dayOfWeek === 0) {
                    rates.add(1.0);
                } else {
                    rates.add(1.5);
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }
            return Array.from(rates);
        }

        function allocateOTHours(targetAmount, project, startDateStr, endDateStr, strategy, specificRate, dayType, isSilent) {
            const hourlyRate = salaryData.basic / 26 / 8;
            if (hourlyRate <= 0) return [];

            let potentialDays = [];
            let currentDate = new Date(startDateStr);
            const endDate = new Date(endDateStr);

            while (currentDate <= endDate) {
                const dayOfWeek = currentDate.getDay();
                const dateStr = currentDate.toISOString().split('T')[0];
                const year = currentDate.getFullYear().toString();
                let rate = 1.5;
                let isWeekend = false;
                let currentDayType = 'weekday';

                if (publicHolidays[year] && publicHolidays[year].includes(dateStr)) {
                    rate = 2.0; isWeekend = true; currentDayType = null; // Public holiday is its own type
                } else if (dayOfWeek === 0) {
                    rate = 1.0; isWeekend = true; currentDayType = null; // Sunday is its own type
                } else if (dayOfWeek === 6) {
                    rate = 1.5; isWeekend = true; currentDayType = 'saturday';
                }
                
                let match = false;
                if (rate === specificRate) {
                    if (dayType === 'weekday' && !isWeekend) match = true;
                    else if (dayType === 'saturday' && currentDayType === 'saturday') match = true;
                    else if (!dayType && (rate === 1.0 || rate === 2.0)) match = true; // For Sunday and PH
                }

                if (match) {
                    potentialDays.push({ date: new Date(currentDate), rate, isWeekend });
                }
                currentDate.setDate(currentDate.getDate() + 1);
            }

            if (potentialDays.length === 0) return [];

            if (strategy === 'back-load') potentialDays.reverse();
            else if (strategy === 'front-load-weekends') potentialDays.sort((a, b) => b.isWeekend - a.isWeekend || a.date - b.date);
            else if (strategy === 'front-load-weekdays') potentialDays.sort((a, b) => a.isWeekend - b.isWeekend || a.date - b.date);

            const totalHoursNeeded = targetAmount / (hourlyRate * specificRate);
            let hoursToDistribute = totalHoursNeeded;
            const entries = [];
            
            const maxTotalHours = potentialDays.length * 8;
            if (totalHoursNeeded > maxTotalHours) {
                hoursToDistribute = maxTotalHours;
            }


            potentialDays.forEach(day => {
                entries.push({
                    id: generateId(),
                    date: day.date.toISOString().split('T')[0],
                    dayName: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][day.date.getDay()],
                    rate: day.rate,
                    isWeekend: day.isWeekend,
                    hours: 0,
                    amount: 0,
                    remarks: project + ' - ' + generateTaskDescription(day.date.getDay()),
                    weight: Math.random()
                });
            });

            let totalWeight = entries.reduce((sum, e) => sum + e.weight, 0);
            entries.forEach(entry => {
                const hoursForThisEntry = (entry.weight / totalWeight) * hoursToDistribute;
                entry.hours = Math.round(hoursForThisEntry * 4) / 4;
            });
            
            // First pass to enforce min/max
            entries.forEach(entry => {
                if (entry.hours > 0 && entry.hours < 1) entry.hours = 1;
                if (entry.hours > 8) entry.hours = 8;
            });

            // Redistribution loop
            let currentTotalHours = entries.reduce((sum, e) => sum + e.hours, 0);
            let hourDifference = hoursToDistribute - currentTotalHours;
            let safetyNet = 0;

            while (Math.abs(hourDifference) > 0.01 && safetyNet < 100) {
                if (hourDifference > 0) { // Need to add hours
                    let eligibleToAdd = entries.filter(e => e.hours < 8);
                    if (eligibleToAdd.length === 0) break;
                    eligibleToAdd.sort((a,b) => a.hours - b.hours);
                    eligibleToAdd[0].hours += 0.25;
                } else { // Need to remove hours
                    let eligibleToRemove = entries.filter(e => e.hours > 1);
                    if (eligibleToRemove.length === 0) break;
                    eligibleToRemove.sort((a,b) => b.hours - a.hours);
                    eligibleToRemove[0].hours -= 0.25;
                }
                currentTotalHours = entries.reduce((sum, e) => sum + e.hours, 0);
                hourDifference = hoursToDistribute - currentTotalHours;
                safetyNet++;
            }


            entries.forEach(entry => {
                entry.amount = entry.hours * hourlyRate * entry.rate;
                const startHourBase = entry.isWeekend ? 9 : 18;
                const randomHourOffset = Math.floor(Math.random() * 3);
                const randomMinute = Math.floor(Math.random() * 4) * 15;
                const startHour = startHourBase + randomHourOffset;
                entry.startTime = `${String(startHour).padStart(2, '0')}:${String(randomMinute).padStart(2, '0')}`;
                const totalStartMinutes = (startHour * 60) + randomMinute;
                const totalDurationMinutes = entry.hours * 60;
                const totalEndMinutes = totalStartMinutes + totalDurationMinutes;
                const endHour = Math.floor(totalEndMinutes / 60);
                const endMinute = Math.round(totalEndMinutes % 60);
                entry.endTime = `${String(endHour % 24).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;
            });
            
            return entries.filter(e => e.hours > 0);
        }
        
        function applyOTAllocation(isSilent = false) {
            if (!isSilent && previewedOTEntries.length === 0) {
                alert('Please generate an allocation first');
                return;
            }
            if (!isSilent && !confirm(`Apply ${previewedOTEntries.length} OT entries?`)) return;

            overtimeEntries = previewedOTEntries;
            saveDataForPeriod(currentPayPeriod);
            previewedOTEntries = [];
            document.getElementById('otAllocationPreview').style.display = 'none';
            displayOTEntries();
            updateDashboard();
            if (!isSilent) showToast('OT allocation applied successfully!');
        }
        
        function generateTaskDescription(dayOfWeek) {
            const tasks = (dayOfWeek === 0 || dayOfWeek === 6) ? ['Migration', 'System upgrade', 'Backup'] : ['Maintenance', 'Report prep', 'Data analysis'];
            return tasks[Math.floor(Math.random() * tasks.length)];
        }
        
        function displayOTPreview(targetAmount) {
            const previewDiv = document.getElementById('otAllocationPreview');
            const contentDiv = document.getElementById('previewContent');
            previewDiv.style.display = 'block';
            contentDiv.innerHTML = '';
            let totalHours = 0, totalAmount = 0;
            previewedOTEntries.sort((a, b) => new Date(a.date) - new Date(b.date)).forEach(entry => {
                totalHours += entry.hours; totalAmount += entry.amount;
                const item = document.createElement('div');
                item.className = 'ot-preview-item';
                item.innerHTML = `<div><strong>${entry.date}</strong> (${entry.dayName})<br>${entry.startTime} - ${entry.endTime}</div><div>${entry.hours.toFixed(2)}h @ ${entry.rate}x<br><strong>RM ${entry.amount.toFixed(2)}</strong></div>`;
                contentDiv.appendChild(item);
            });
            
            if (targetAmount && totalAmount < targetAmount * 0.99) {
                const warning = document.createElement('div');
                warning.className = 'alert alert-warning';
                warning.innerHTML = `<strong>Warning:</strong> Target of RM ${targetAmount.toFixed(2)} could not be reached with the 8-hour daily cap. The maximum achievable is <strong>RM ${totalAmount.toFixed(2)}</strong>.`;
                contentDiv.prepend(warning);
            }

            const summary = document.createElement('div');
            summary.style.cssText = 'margin-top: 15px; padding: 10px; background: #e7f3ff; border-radius: 5px;';
            summary.innerHTML = `<strong>Total: ${totalHours.toFixed(2)} hours = RM ${totalAmount.toFixed(2)}</strong>`;
            contentDiv.appendChild(summary);
        }
        
        function previewOTAllocation() {
            if (previewedOTEntries.length === 0) { alert('Please generate an allocation first'); return; }
            const previewDiv = document.getElementById('otAllocationPreview');
            previewDiv.style.display = previewDiv.style.display === 'none' ? 'block' : 'none';
        }
        
        function getDayType(entry) {
            const date = new Date(entry.date);
            const dateStr = entry.date;
            const year = date.getFullYear().toString();
            if (publicHolidays[year] && publicHolidays[year].includes(dateStr)) return 'publicHoliday';
            const dayOfWeek = date.getDay();
            if (dayOfWeek === 0) return 'sunday';
            if (dayOfWeek === 6) return 'saturday';
            return 'weekday';
        }

        function displayOTEntries() {
            const tbody = document.getElementById('otTableBody');
            tbody.innerHTML = '';
            let totalHours = 0, totalAmount = 0;
            let hoursByDayType = { weekday: 0, saturday: 0, sunday: 0, publicHoliday: 0 };

            overtimeEntries.sort((a, b) => new Date(a.date) - new Date(b.date));
            
            overtimeEntries.forEach(entry => {
                totalHours += entry.hours; 
                totalAmount += entry.amount;
                
                const dayType = getDayType(entry);
                hoursByDayType[dayType] += entry.hours;

                const row = tbody.insertRow();
                row.id = `ot-row-${entry.id}`;
                row.innerHTML = `
                    <td><input type="date" value="${entry.date}" onchange="saveOTEntry('${entry.id}')"></td>
                    <td><input type="time" value="${entry.startTime}" onchange="saveOTEntry('${entry.id}')"></td>
                    <td><input type="time" value="${entry.endTime}" onchange="saveOTEntry('${entry.id}')"></td>
                    <td>
                        <div class="hours-input-group">
                            <button onclick="adjustHour('${entry.id}', -0.25)">-</button>
                            <input type="number" step="0.25" value="${entry.hours.toFixed(2)}" onchange="saveOTEntry('${entry.id}')">
                            <button onclick="adjustHour('${entry.id}', 0.25)">+</button>
                        </div>
                    </td>
                    <td>
                        <select onchange="saveOTEntry('${entry.id}')">
                            <option value="1.0" ${entry.rate === 1.0 ? 'selected' : ''}>1.0x</option>
                            <option value="1.5" ${entry.rate === 1.5 ? 'selected' : ''}>1.5x</option>
                            <option value="2.0" ${entry.rate === 2.0 ? 'selected' : ''}>2.0x</option>
                            <option value="3.0" ${entry.rate === 3.0 ? 'selected' : ''}>3.0x</option>
                        </select>
                    </td>
                    <td><input type="text" value="${entry.remarks}" onchange="saveOTEntry('${entry.id}')"></td>
                    <td>
                        <button class="btn btn-small btn-danger" onclick="deleteOTEntry('${entry.id}')">Delete</button>
                    </td>`;
            });
            
            document.getElementById('totalOTHoursSummary').textContent = totalHours.toFixed(2);
            document.getElementById('totalOTEarningsSummary').textContent = `RM ${totalAmount.toFixed(2)}`;
            
            const adjusterDiv = document.getElementById('otAdjuster');
            const stickySummaryDiv = document.getElementById('sticky-ot-summary');

            if (overtimeEntries.length > 0) {
                const adjusterGrid = document.getElementById('otAdjusterGrid');
                adjusterGrid.innerHTML = '';

                const dayTypes = {
                    weekday: "Weekday",
                    saturday: "Saturday",
                    sunday: "Sunday",
                    publicHoliday: "Public Holiday"
                };

                for (const dayType in dayTypes) {
                    if (hoursByDayType[dayType] > 0) {
                        const formGroup = document.createElement('div');
                        formGroup.className = 'adjuster-group';
                        formGroup.innerHTML = `
                            <label>${dayTypes[dayType]} Hours: <strong id="display_day_${dayType}">${hoursByDayType[dayType].toFixed(2)}</strong></label>
                            <div>
                                <button class="btn btn-small btn-secondary" onclick="adjustHoursByDayType('${dayType}', -1)">-1hr</button>
                                <button class="btn btn-small btn-secondary" onclick="adjustHoursByDayType('${dayType}', -0.25)">-15m</button>
                                <button class="btn btn-small btn-secondary" onclick="adjustHoursByDayType('${dayType}', 0.25)">+15m</button>
                                <button class="btn btn-small btn-secondary" onclick="adjustHoursByDayType('${dayType}', 1)">+1hr</button>
                            </div>
                        `;
                        adjusterGrid.appendChild(formGroup);
                    }
                }
                adjusterDiv.style.display = 'block';
                stickySummaryDiv.style.display = 'block'; 
            } else {
                adjusterDiv.style.display = 'none';
                stickySummaryDiv.style.display = 'none';
            }

            // Update OT Target Progress Bar
            const targetOTEarnings = parseFloat(document.getElementById('targetOTEarnings').value) || 0;
            const otProgressBarContainer = document.getElementById('otTargetProgressBarContainer');
            if (targetOTEarnings > 0) {
                otProgressBarContainer.style.display = 'block';
                const otProgress = document.getElementById('otTargetProgress');
                const percent = Math.min((totalAmount / targetOTEarnings) * 100, 100);
                otProgress.style.width = `${percent}%`;
                otProgress.textContent = `RM ${totalAmount.toFixed(2)} / RM ${targetOTEarnings.toFixed(2)} (${percent.toFixed(1)}%)`;
                document.getElementById('otTargetProgressLabel').style.display = 'block';
            } else {
                otProgressBarContainer.style.display = 'none';
            }
        }
        
        function adjustHour(id, amount) {
            const entryIndex = overtimeEntries.findIndex(e => e.id == id);
            if (entryIndex === -1) return;
            
            const entry = overtimeEntries[entryIndex];
            entry.hours += amount;
            if (entry.hours < 0) entry.hours = 0;

            const hourlyRate = salaryData.basic / 26 / 8;
            entry.amount = entry.hours * entry.rate * hourlyRate;

            if (entry.startTime) {
                const [startHour, startMinute] = entry.startTime.split(':').map(Number);
                const totalMinutes = (startHour * 60) + startMinute + (entry.hours * 60);
                const endHour = Math.floor(totalMinutes / 60);
                const endMinute = Math.round(totalMinutes % 60);
                entry.endTime = `${String(endHour % 24).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;
            }

            saveDataForPeriod(currentPayPeriod);
            displayOTEntries();
            updateDashboard();
        }

        function adjustHoursByDayType(dayType, adjustment) {
            const hourlyRate = salaryData.basic / 26 / 8;
            
            const entriesForDayType = overtimeEntries.filter(e => getDayType(e) === dayType);
            if (entriesForDayType.length === 0) return;

            let totalOriginalHours = 0;
            entriesForDayType.forEach(e => totalOriginalHours += e.hours);

            if (totalOriginalHours + adjustment < 0) {
                alert("Cannot reduce hours below zero.");
                return;
            }

            const newTotalHours = totalOriginalHours + adjustment;
            const scalingFactor = newTotalHours / totalOriginalHours;

            entriesForDayType.forEach(entry => {
                entry.hours *= scalingFactor;
                entry.amount = entry.hours * hourlyRate * entry.rate;
                if (entry.startTime) {
                    const [startHour, startMinute] = entry.startTime.split(':').map(Number);
                    const totalMinutes = (startHour * 60) + startMinute + (entry.hours * 60);
                    const endHour = Math.floor(totalMinutes / 60);
                    const endMinute = Math.round(totalMinutes % 60);
                    entry.endTime = `${String(endHour % 24).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;
                }
            });

            saveDataForPeriod(currentPayPeriod);
            displayOTEntries();
            updateDashboard();
        }
        
        function saveOTEntry(id) {
            const row = document.getElementById(`ot-row-${id}`);
            const inputs = row.querySelectorAll('input, select');
            const entryIndex = overtimeEntries.findIndex(e => e.id == id);
            if (entryIndex === -1) return;

            const date = inputs[0].value;
            const startTime = inputs[1].value;
            const endTime = inputs[2].value;
            let hours = parseFloat(inputs[3].value);
            const rate = parseFloat(inputs[4].value);
            const remarks = inputs[5].value;

            if (startTime && endTime) {
                const start = new Date(`${date}T${startTime}`);
                const end = new Date(`${date}T${endTime}`);
                if (end < start) { end.setDate(end.getDate() + 1); }
                const diffMs = end - start;
                const rawHours = diffMs / (1000 * 60 * 60);
                hours = Math.round(rawHours * 4) / 4; // Round to the nearest 15-minute increment
            }
            
            if (hours > 24) {
                alert("An overtime entry cannot exceed 24 hours.");
                displayOTEntries();
                return;
            }

            const hourlyRate = salaryData.basic / 26 / 8;

            overtimeEntries[entryIndex] = {
                ...overtimeEntries[entryIndex],
                date: date, startTime: startTime, endTime: endTime,
                hours: hours, rate: rate, remarks: remarks,
                amount: hours * rate * hourlyRate
            };
            saveDataForPeriod(currentPayPeriod);
            displayOTEntries();
            updateDashboard();
        }

        function deleteOTEntry(id) {
            overtimeEntries = overtimeEntries.filter(e => e.id != id);
            saveDataForPeriod(currentPayPeriod);
            displayOTEntries();
            updateDashboard();
        }

        function deleteAllOTEntries() {
            if (confirm("Are you sure you want to delete ALL overtime entries? This action cannot be undone.")) {
                overtimeEntries = [];
                saveDataForPeriod(currentPayPeriod);
                displayOTEntries();
                updateDashboard();
                showToast("All overtime entries have been deleted.");
            }
        }
        
        function updateFullAmountInput() {
            const yourShare = parseFloat(document.getElementById('expenseAmount').value) || 0;
            const splitPayment = parseFloat(document.getElementById('expenseSplitPayment').value) || 0;
            document.getElementById('expenseFullAmount').value = (yourShare + splitPayment).toFixed(2);
        }

        function addExpense() {
            const date = document.getElementById('expenseDate').value;
            const category = document.getElementById('expenseCategory').value;
            const yourShare = parseFloat(document.getElementById('expenseAmount').value) || 0;
            const splitPayment = parseFloat(document.getElementById('expenseSplitPayment').value) || 0;
            const fullAmount = yourShare + splitPayment;
            const description = document.getElementById('expenseDescription').value;
            const isRecurring = document.getElementById('isRecurringExpense').checked;

            if (!date || !fullAmount) { alert('Please fill in a date and at least one share amount.'); return; }
            
            const newExpense = { id: generateId(), date, category, amount: yourShare, splitPayment, description, fullAmount, isRecurring };
            expenses.push(newExpense);

            if (isRecurring) {
                const recurringExists = recurringExpenses.some(re => re.description === description && re.amount === yourShare && re.splitPayment === splitPayment);
                if (!recurringExists) {
                    recurringExpenses.push({ id: generateId(), category, amount: yourShare, splitPayment, description, fullAmount });
                    saveRecurringExpenses();
                }
            }

            saveDataForPeriod(currentPayPeriod);
            displayExpenses();
            updateDashboard();
            
            // Clear form
            document.getElementById('expenseAmount').value = '';
            document.getElementById('expenseSplitPayment').value = '';
            document.getElementById('expenseFullAmount').value = '';
            document.getElementById('expenseDescription').value = '';
            document.getElementById('isRecurringExpense').checked = false;
        }
        
        function sortExpenses(column) {
            if (expenseSortColumn === column) {
                expenseSortDirection = expenseSortDirection === 'asc' ? 'desc' : 'asc';
            } else {
                expenseSortColumn = column;
                expenseSortDirection = ['date', 'amount', 'splitPayment', 'fullAmount'].includes(column) ? 'desc' : 'asc';
            }
            displayExpenses();
        }

        function displayExpenses() {
            const tbody = document.getElementById('expenseTableBody');
            const tfoot = document.getElementById('expenseTableFooter');
            tbody.innerHTML = '';
            tfoot.innerHTML = '';

            // Sorting logic
            const direction = expenseSortDirection === 'asc' ? 1 : -1;
            expenses.sort((a, b) => {
                let valA = a[expenseSortColumn];
                let valB = b[expenseSortColumn];

                if (expenseSortColumn === 'date') {
                    valA = new Date(valA);
                    valB = new Date(valB);
                }
                
                if (typeof valA === 'string') {
                    return valA.localeCompare(valB) * direction;
                } else {
                    return (valA - valB) * direction;
                }
            });
            
            // Update header classes for sort indicators
            document.querySelectorAll('#expenseTable th.sortable').forEach(th => {
                th.classList.remove('sorted-asc', 'sorted-desc');
                if (th.getAttribute('onclick').includes(`'${expenseSortColumn}'`)) {
                    th.classList.add(expenseSortDirection === 'asc' ? 'sorted-asc' : 'sorted-desc');
                }
            });

            
            let totalYourShare = 0;
            let totalSplitPayment = 0;
            let totalFullAmount = 0;
            
            expenses.forEach(expense => {
                totalYourShare += expense.amount;
                totalSplitPayment += expense.splitPayment || 0;
                totalFullAmount += expense.fullAmount || (expense.amount + (expense.splitPayment || 0));

                const row = tbody.insertRow();
                row.id = `exp-row-${expense.id}`;
                row.innerHTML = `
                    <td onclick="makeEditable(this, '${expense.id}', 'date')">${expense.date}</td>
                    <td onclick="makeEditable(this, '${expense.id}', 'category')"><span class="expense-category category-${expense.category.replace(/_/g, '-')}">${expense.category.replace(/_/g, ' ')}</span></td>
                    <td onclick="makeEditable(this, '${expense.id}', 'description')">${expense.description}</td>
                    <td onclick="makeEditable(this, '${expense.id}', 'amount')">RM ${expense.amount.toFixed(2)}</td>
                    <td onclick="makeEditable(this, '${expense.id}', 'splitPayment')">RM ${(expense.splitPayment || 0).toFixed(2)}</td>
                    <td>RM ${(expense.fullAmount || expense.amount).toFixed(2)}</td>
                    <td style="text-align: center;"><input type="checkbox" onchange="toggleRecurringStatus('${expense.id}', this.checked)" ${expense.isRecurring ? 'checked' : ''}></td>
                    <td>
                        <button class="btn btn-small btn-danger" onclick="deleteExpense('${expense.id}')">Delete</button>
                    </td>`;
            });

            // Add footer row
            const footerRow = tfoot.insertRow();
            footerRow.style.fontWeight = 'bold';
            footerRow.innerHTML = `
                <td colspan="3" style="text-align: right;">Subtotal:</td>
                <td>RM ${totalYourShare.toFixed(2)}</td>
                <td>RM ${totalSplitPayment.toFixed(2)}</td>
                <td>RM ${totalFullAmount.toFixed(2)}</td>
                <td colspan="2"></td>
            `;

            // Auto-update expected expenses if not manually set
            if (!manualExpenseSet) {
                const expectedExpensesInput = document.getElementById('expectedExpenses');
                expectedExpensesInput.value = totalFullAmount.toFixed(2);
                savingsGoalsData.expectedExpenses = totalFullAmount;
                updateDashboard(); // Update dashboard when this auto-updates
            }
        }


        function makeEditable(cell, id, field) {
            if (cell.querySelector('input, select')) return;
            const expense = expenses.find(e => e.id === id);
            if (!expense) return;

            const originalValue = cell.innerHTML;
            let inputElement;

            switch (field) {
                case 'date':
                    inputElement = document.createElement('input');
                    inputElement.type = 'date';
                    inputElement.value = expense.date;
                    break;
                case 'category':
                    inputElement = document.createElement('select');
                    inputElement.innerHTML = document.getElementById('expenseCategory').innerHTML;
                    inputElement.value = expense.category;
                    break;
                case 'description':
                    inputElement = document.createElement('input');
                    inputElement.type = 'text';
                    inputElement.value = expense.description;
                    break;
                case 'amount':
                case 'splitPayment':
                    inputElement = document.createElement('input');
                    inputElement.type = 'number';
                    inputElement.step = '0.01';
                    inputElement.value = expense[field] || 0;
                    break;
                default:
                    return;
            }

            cell.innerHTML = '';
            cell.appendChild(inputElement);
            inputElement.focus();

            const saveChanges = () => {
                const expenseIndex = expenses.findIndex(e => e.id === id);
                if (expenseIndex === -1) return;

                if (field === 'amount' || field === 'splitPayment') {
                    expenses[expenseIndex][field] = parseFloat(inputElement.value) || 0;
                    const yourShare = expenses[expenseIndex].amount || 0;
                    const splitPay = expenses[expenseIndex].splitPayment || 0;
                    expenses[expenseIndex].fullAmount = yourShare + splitPay;
                } else {
                    expenses[expenseIndex][field] = inputElement.value;
                }
                
                saveDataForPeriod(currentPayPeriod);
                updateDashboard();
                updateSummary();
                displayExpenses(); // Redraw table to reflect all changes
            };

            inputElement.onblur = saveChanges;
            inputElement.onkeydown = (e) => {
                if (e.key === 'Enter') inputElement.blur();
                else if (e.key === 'Escape') cell.innerHTML = originalValue;
            };
        }
        
        function deleteExpense(id) {
            const expenseIndex = expenses.findIndex(e => e.id === id);
            if (expenseIndex > -1) {
                const expenseToDelete = expenses[expenseIndex];
                if (expenseToDelete.isRecurring) {
                    const recurringIndex = recurringExpenses.findIndex(re => re.description === expenseToDelete.description && re.amount === expenseToDelete.amount);
                    if (recurringIndex > -1) {
                        recurringExpenses.splice(recurringIndex, 1);
                        saveRecurringExpenses();
                    }
                }
                expenses.splice(expenseIndex, 1);
                saveDataForPeriod(currentPayPeriod);
                displayExpenses();
                updateDashboard();
            }
        }
        
        function calculateRequiredOT() {
            const targetSavings = parseFloat(document.getElementById('targetSavings').value) || 0;
            const expectedExpenses = parseFloat(document.getElementById('expectedExpenses').value) || 0;
            if (!targetSavings) { alert('Please enter a savings target'); return; }
            const grossIncome = salaryData.basic + salaryData.claims + salaryData.hpAllowance + salaryData.incentive + salaryData.bonus + (salaryData.otherIncome || 0);
            const totalDeductions = salaryData.epf + salaryData.socso + salaryData.eis + salaryData.pcb + salaryData.cashAdvance + salaryData.otherDeductions;
            const baseNetIncome = grossIncome - totalDeductions;
            const afterExpenses = baseNetIncome - expectedExpenses;
            const otRequired = Math.max(0, targetSavings - afterExpenses);
            const hourlyRate = salaryData.basic / 26 / 8;
            const hoursNeeded = otRequired / (hourlyRate * 1.5);
            const analysisDiv = document.getElementById('savingsAnalysis');
            analysisDiv.style.display = 'block';
            document.getElementById('baseNetIncome').textContent = `RM ${baseNetIncome.toFixed(2)}`;
            document.getElementById('afterExpenses').textContent = `RM ${afterExpenses.toFixed(2)}`;
            document.getElementById('otRequired').textContent = `RM ${otRequired.toFixed(2)}`;
            document.getElementById('hoursNeeded').textContent = `${hoursNeeded.toFixed(1)} hrs`;
            const alertDiv = document.getElementById('savingsAlert');
            if (otRequired === 0) {
                alertDiv.className = 'alert alert-success';
                alertDiv.innerHTML = '✅ Great! You can achieve your savings target without overtime!';
            } else {
                alertDiv.className = 'alert alert-warning';
                alertDiv.innerHTML = `⚠️ You need ${hoursNeeded.toFixed(1)} hours of overtime to reach your target.`;
            }
            savingsTarget = targetSavings;
            updateDashboard();
            runAICoach(otRequired);
        }
        
        function autoGenerateOTForTarget() {
            const otRequiredText = document.getElementById('otRequired').textContent;
            const otRequired = parseFloat(otRequiredText.replace('RM ', '')) || 0;
            if (otRequired > 0) {
                document.getElementById('targetOTEarnings').value = otRequired.toFixed(2);
                generateSmartOTAllocation(true); // Generate silently
                applyOTAllocation(true); // Auto-apply silently
                 showToast('🚀 OT Schedule has been auto-generated and applied!');
            } else {
                alert("No overtime is required to meet your target.");
            }
        }
        
        function updateDashboard() {
            const totalOT = overtimeEntries.reduce((sum, e) => sum + e.amount, 0);
            const grossIncome = salaryData.basic + salaryData.claims + salaryData.hpAllowance + salaryData.incentive + salaryData.bonus + (salaryData.otherIncome || 0) + totalOT;
            const totalDeductions = salaryData.epf + salaryData.socso + salaryData.eis + salaryData.pcb + salaryData.cashAdvance + salaryData.otherDeductions;
            const netIncome = grossIncome - totalDeductions;
            
            // Use EXPECTED expenses for the dashboard card, as requested
            const expectedExpensesForDashboard = parseFloat(document.getElementById('expectedExpenses').value) || 0;
            const actualSavings = netIncome - expectedExpensesForDashboard;

            document.getElementById('totalIncome').textContent = `RM ${grossIncome.toFixed(2)}`;
            document.getElementById('netIncome').textContent = `RM ${netIncome.toFixed(2)}`;
            
            const meetTargetBtn = document.getElementById('meetTargetBtn');

            if (savingsTarget > 0) {
                document.getElementById('savingsTargetDisplay').textContent = `RM ${savingsTarget.toFixed(2)}`;
                document.getElementById('savingsActual').textContent = `RM ${actualSavings.toFixed(2)}`;

                const indicator = document.getElementById('savingsIndicator');
                if (actualSavings >= savingsTarget) {
                    indicator.className = 'savings-indicator savings-good';
                    indicator.textContent = 'On Track ✓';
                    if(meetTargetBtn) meetTargetBtn.style.display = 'none';
                } else if (actualSavings >= savingsTarget * 0.8) {
                    indicator.className = 'savings-indicator savings-warning';
                    indicator.textContent = 'Close';
                    if(meetTargetBtn) meetTargetBtn.style.display = 'inline-block';
                } else {
                    indicator.className = 'savings-indicator savings-danger';
                    indicator.textContent = 'Behind';
                    if(meetTargetBtn) meetTargetBtn.style.display = 'none';
                }

                // This progress bar should reflect actual savings vs target
                const totalTrackedExpenses = expenses.reduce((sum, e) => sum + e.amount, 0);
                const liveActualSavings = netIncome - totalTrackedExpenses;
                const progressPercent = Math.min((liveActualSavings / savingsTarget) * 100, 100);
                const progressBar = document.getElementById('savingsProgress');
                if (progressBar) {
                    progressBar.style.width = `${progressPercent}%`;
                    progressBar.textContent = `${progressPercent.toFixed(1)}%`;
                }

                const monthSavedEl = document.getElementById('monthSaved');
                if (monthSavedEl) monthSavedEl.textContent = `RM ${liveActualSavings.toFixed(2)}`;

            } else {
                 if(meetTargetBtn) meetTargetBtn.style.display = 'none';
            }
        }
        
        function meetSavingsTarget() {
            const totalOT = overtimeEntries.reduce((sum, e) => sum + e.amount, 0);
            const grossIncome = salaryData.basic + salaryData.claims + salaryData.hpAllowance + salaryData.incentive + salaryData.bonus + (salaryData.otherIncome || 0) + totalOT;
            const totalDeductions = salaryData.epf + salaryData.socso + salaryData.eis + salaryData.pcb + salaryData.cashAdvance + salaryData.otherDeductions;
            const netIncome = grossIncome - totalDeductions;
            const expectedExpenses = parseFloat(document.getElementById('expectedExpenses').value) || 0;
            const actualSavings = netIncome - expectedExpenses;
            const shortfall = savingsTarget - actualSavings;

            if (shortfall > 0) {
                const hourlyRate = salaryData.basic / 26 / 8;
                const hoursNeeded = Math.ceil((shortfall / (hourlyRate * 1.5)) * 4) / 4;
                
                const endDate = new Date(document.getElementById('otEndDate').value);
                let lastWorkDay = null;
                for (let i = 0; i < 30; i++) {
                    let checkDate = new Date(endDate);
                    checkDate.setDate(checkDate.getDate() - i);
                    const dayOfWeek = checkDate.getDay();
                    const dateStr = checkDate.toISOString().split('T')[0];
                    const year = checkDate.getFullYear().toString();
                    if (dayOfWeek > 0 && dayOfWeek < 6 && !(publicHolidays[year] && publicHolidays[year].includes(dateStr))) {
                        lastWorkDay = checkDate;
                        break;
                    }
                }

                if (lastWorkDay) {
                    const newEntry = {
                        id: generateId(),
                        date: lastWorkDay.toISOString().split('T')[0],
                        dayName: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][lastWorkDay.getDay()],
                        startTime: '18:00',
                        endTime: '18:00',
                        hours: hoursNeeded,
                        rate: 1.5,
                        amount: hoursNeeded * 1.5 * hourlyRate,
                        remarks: 'Adjustment to meet savings target'
                    };
                    
                    const [startHour, startMinute] = newEntry.startTime.split(':').map(Number);
                    const totalMinutes = (startHour * 60) + startMinute + (newEntry.hours * 60);
                    const endHour = Math.floor(totalMinutes / 60);
                    const endMinute = totalMinutes % 60;
                    newEntry.endTime = `${String(endHour % 24).padStart(2, '0')}:${String(endMinute).padStart(2, '0')}`;

                    overtimeEntries.push(newEntry);
                    saveDataForPeriod(currentPayPeriod);
                    displayOTEntries();
                    updateDashboard();
                    showToast(`Added ${hoursNeeded} hours to meet your target!`);
                } else {
                    alert('Could not find a suitable workday to add overtime.');
                }
            }
        }
        
        function updateSummary() {
            const totalOT = overtimeEntries.reduce((sum, e) => sum + e.amount, 0);
            const grossIncome = salaryData.basic + salaryData.claims + salaryData.hpAllowance + salaryData.incentive + salaryData.bonus + (salaryData.otherIncome || 0) + totalOT;
            const totalDeductions = salaryData.epf + salaryData.socso + salaryData.eis + salaryData.pcb + salaryData.cashAdvance + salaryData.otherDeductions;
            const netIncome = grossIncome - totalDeductions;
            const totalYourShare = expenses.reduce((sum, e) => sum + e.amount, 0);
            const totalFullAmount = expenses.reduce((sum, e) => sum + (e.fullAmount || e.amount), 0);
            const savings = netIncome - totalYourShare;
            const savingsRate = netIncome > 0 ? (savings / netIncome * 100) : 0;
            
            document.getElementById('summaryGross').textContent = `RM ${grossIncome.toFixed(2)}`;
            document.getElementById('summaryDeductions').textContent = `RM ${totalDeductions.toFixed(2)}`;
            document.getElementById('summaryNet').textContent = `RM ${netIncome.toFixed(2)}`;
            document.getElementById('summaryExpenses').textContent = `RM ${totalYourShare.toFixed(2)}`;
            document.getElementById('summaryFullExpenses').textContent = `RM ${totalFullAmount.toFixed(2)}`;
            document.getElementById('summarySavings').textContent = `RM ${savings.toFixed(2)}`;
            document.getElementById('savingsRate').textContent = `${savingsRate.toFixed(1)}%`;
            document.getElementById('incomeBasic').textContent = `RM ${salaryData.basic.toFixed(2)}`;
            document.getElementById('incomeOT').textContent = `RM ${totalOT.toFixed(2)}`;
            document.getElementById('incomeAllowances').textContent = `RM ${(salaryData.hpAllowance + salaryData.incentive).toFixed(2)}`;
            document.getElementById('incomeOthers').textContent = `RM ${(salaryData.claims + salaryData.bonus + (salaryData.otherIncome || 0)).toFixed(2)}`;
            
            const categoryTotals = {};
            expenses.forEach(expense => {
                if (!categoryTotals[expense.category]) categoryTotals[expense.category] = 0;
                categoryTotals[expense.category] += expense.amount;
            });
            const breakdownDiv = document.getElementById('categoryBreakdown');
            breakdownDiv.innerHTML = '';
            Object.entries(categoryTotals).forEach(([category, amount]) => {
                const div = document.createElement('div');
                div.className = 'summary-item';
                div.innerHTML = `<div class="stat-label">${category.replace(/_/g, ' ')}</div><div style="font-size: 1.2em; font-weight: bold;">RM ${amount.toFixed(2)}</div><div style="font-size: 0.9em; color: #666;">${(totalYourShare > 0 ? (amount / totalYourShare) * 100 : 0).toFixed(1)}% of total</div>`;
                breakdownDiv.appendChild(div);
            });
        }
        
        function runForecast() {
            let totalIncome = 0, totalExpenses = 0, months = 0;
            const today = new Date();
            for (let i = 1; i <= 3; i++) {
                const d = new Date(today.getFullYear(), today.getMonth() - i, 1);
                const period = getMonthKey(d);
                const pastSalary = JSON.parse(localStorage.getItem(`salaryData_${period}`));
                const pastOT = JSON.parse(localStorage.getItem(`overtimeEntries_${period}`));
                const pastExpenses = JSON.parse(localStorage.getItem(`expenses_${period}`));
                if (pastSalary && pastOT && pastExpenses) {
                    const otTotal = pastOT.reduce((sum, e) => sum + e.amount, 0);
                    totalIncome += pastSalary.basic + pastSalary.claims + pastSalary.hpAllowance + pastSalary.incentive + pastSalary.bonus + (pastSalary.otherIncome || 0) + otTotal;
                    totalExpenses += pastExpenses.reduce((sum, e) => sum + e.amount, 0);
                    months++;
                }
            }
            const avgIncome = months > 0 ? totalIncome / months : 0;
            const avgExpenses = months > 0 ? totalExpenses / months : 0;
            document.getElementById('forecastedIncome').textContent = `RM ${avgIncome.toFixed(2)}`;
            document.getElementById('forecastedExpenses').textContent = `RM ${avgExpenses.toFixed(2)}`;
        }

        function runAICoach(shortfall) {
            const coachSection = document.getElementById('aiCoachSection');
            if (shortfall <= 0) {
                coachSection.style.display = 'none';
                return;
            }
            const categoryTotals = {};
            expenses.forEach(expense => {
                if (!categoryTotals[expense.category]) categoryTotals[expense.category] = 0;
                categoryTotals[expense.category] += expense.amount;
            });
            const topCategories = Object.entries(categoryTotals)
                .sort(([, a], [, b]) => b - a)
                .slice(0, 2);

            if (topCategories.length > 0) {
                const suggestion = topCategories.map(([cat, amt]) => {
                    const reduction = Math.min(shortfall / topCategories.length, amt * 0.2);
                    const percent = (reduction / amt * 100).toFixed(0);
                    return `reducing '${cat}' spending by ${percent}% (RM ${reduction.toFixed(2)})`;
                }).join(' or ');
                document.getElementById('aiCoachText').innerHTML = `You could also meet your goal by ${suggestion}.`;
                coachSection.style.display = 'block';
            } else {
                coachSection.style.display = 'none';
            }
        }
        
        function checkAchievements() {
            let changed = false;
            if (savingsGoalsData.targetSavings > 0 && !unlockedAchievements.firstSavings) {
                unlockedAchievements.firstSavings = true;
                showToast('🏆 Achievement Unlocked: First Step!');
                changed = true;
            }
            const totalOTHours = overtimeEntries.reduce((sum, e) => sum + e.hours, 0);
            if (totalOTHours > 60 && !unlockedAchievements.otChampion) {
                unlockedAchievements.otChampion = true;
                showToast('🏆 Achievement Unlocked: OT Champion!');
                changed = true;
            }
            const totalExpenses = expenses.reduce((sum, e) => sum + e.amount, 0);
            if (savingsGoalsData.expectedExpenses > 0 && totalExpenses < savingsGoalsData.expectedExpenses && !unlockedAchievements.budgetBoss) {
                unlockedAchievements.budgetBoss = true;
                showToast('🏆 Achievement Unlocked: Budget Boss!');
                changed = true;
            }
            if (savingsGoalsData.emergencyFundGoal > 0 && savingsGoalsData.currentEmergencyFund >= savingsGoalsData.emergencyFundGoal && !unlockedAchievements.emergencyReady) {
                unlockedAchievements.emergencyReady = true;
                showToast('🏆 Achievement Unlocked: Emergency Ready!');
                changed = true;
            }
            
            if (!unlockedAchievements.savingsStreak) {
                let streak = 0;
                const today = new Date();
                for (let i = 1; i <= 3; i++) {
                    const d = new Date(today.getFullYear(), today.getMonth() - i, 1);
                    const period = getMonthKey(d);
                    const pastGoals = JSON.parse(localStorage.getItem(`savingsGoalsData_${period}`));
                    const pastSalary = JSON.parse(localStorage.getItem(`salaryData_${period}`));
                    const pastOT = JSON.parse(localStorage.getItem(`overtimeEntries_${period}`));
                    const pastExpenses = JSON.parse(localStorage.getItem(`expenses_${period}`));
                    if (pastGoals && pastGoals.targetSavings > 0 && pastSalary && pastOT && pastExpenses) {
                        const otTotal = pastOT.reduce((sum, e) => sum + e.amount, 0);
                        const netIncome = (pastSalary.basic + pastSalary.claims + pastSalary.hpAllowance + pastSalary.incentive + pastSalary.bonus + (pastSalary.otherIncome || 0) + otTotal) - (pastSalary.epf + pastSalary.socso + pastSalary.eis + pastSalary.pcb + pastSalary.cashAdvance + pastSalary.otherDeductions);
                        const totalExpenses = pastExpenses.reduce((sum, e) => sum + e.amount, 0);
                        if (netIncome - totalExpenses >= pastGoals.targetSavings) {
                            streak++;
                        }
                    }
                }
                if (streak >= 3) {
                    unlockedAchievements.savingsStreak = true;
                    showToast('🏆 Achievement Unlocked: Savings Streak!');
                    changed = true;
                }
            }

            if (changed) {
                localStorage.setItem('unlockedAchievements', JSON.stringify(unlockedAchievements));
                displayAchievements();
            }
        }

        function displayAchievements() {
            const grid = document.getElementById('achievementsGrid');
            grid.innerHTML = '';
            for (const key in achievements) {
                const ach = achievements[key];
                const isUnlocked = unlockedAchievements[key];
                const card = document.createElement('div');
                card.className = `achievement-card ${isUnlocked ? 'unlocked' : ''}`;
                card.innerHTML = `
                    <div class="achievement-icon">${ach.icon}</div>
                    <div class="achievement-title">${ach.title}</div>
                    <div class="achievement-desc">${ach.desc}</div>
                `;
                grid.appendChild(card);
            }
        }

        function showToast(message) {
            const toast = document.getElementById('toast-notification');
            if (toast) {
                toast.textContent = message;
                toast.style.display = 'block';
                setTimeout(() => {
                    toast.style.opacity = '1';
                    toast.style.top = '30px';
                }, 100);

                setTimeout(() => {
                    toast.style.opacity = '0';
                    toast.style.top = '20px';
                    setTimeout(() => {
                        toast.style.display = 'none';
                    }, 500);
                }, 4000);
            }
        }
        
        function exportData() {
            const dataToExport = {};
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key.startsWith('salaryData_') || key.startsWith('overtimeEntries_') || key.startsWith('expenses_') || key.startsWith('savingsGoalsData_') || key === 'unlockedAchievements' || key === 'recurringExpenses') {
                    dataToExport[key] = JSON.parse(localStorage.getItem(key));
                }
            }

            const jsonString = JSON.stringify(dataToExport, null, 2);
            const blob = new Blob([jsonString], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            const date = new Date().toISOString().split('T')[0];
            a.href = url;
            a.download = `salary-tracker-backup-${date}.json`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            showToast('Data exported successfully!');
        }

        function triggerImport() {
            document.getElementById('import-file').click();
        }

        function importData(event) {
            const file = event.target.files[0];
            if (!file) {
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedData = JSON.parse(e.target.result);
                    if (!confirm('This will overwrite all existing data. Are you sure you want to continue?')) {
                        return;
                    }
                    
                    localStorage.clear();
                    
                    for (const key in importedData) {
                        if (Object.prototype.hasOwnProperty.call(importedData, key)) {
                            localStorage.setItem(key, JSON.stringify(importedData[key]));
                        }
                    }
                    
                    showToast('Data imported successfully! Reloading...');
                    setTimeout(() => {
                        location.reload();
                    }, 1500);

                } catch (error) {
                    alert('Error parsing JSON file. Please make sure it is a valid backup file.');
                    console.error("Import error:", error);
                }
            };
            reader.readAsText(file);
            event.target.value = '';
        }

        // --- RECURRING EXPENSES FUNCTIONS ---
        function toggleRecurringStatus(expenseId, isChecked) {
            const expenseIndex = expenses.findIndex(e => e.id === expenseId);
            if (expenseIndex === -1) return;

            expenses[expenseIndex].isRecurring = isChecked;

            const expense = expenses[expenseIndex];
            const recurringIndex = recurringExpenses.findIndex(re => re.description === expense.description && re.amount === expense.amount && re.splitPayment === expense.splitPayment);

            if (isChecked) {
                // Add to recurring list if it doesn't exist
                if (recurringIndex === -1) {
                    recurringExpenses.push({ id: generateId(), category: expense.category, amount: expense.amount, splitPayment: expense.splitPayment, description: expense.description, fullAmount: expense.fullAmount });
                    saveRecurringExpenses();
                }
            } else {
                // Remove from recurring list if it exists
                if (recurringIndex > -1) {
                    recurringExpenses.splice(recurringIndex, 1);
                    saveRecurringExpenses();
                }
            }
            saveDataForPeriod(currentPayPeriod);
            showToast(`Expense marked as ${isChecked ? 'recurring' : 'not recurring'}.`);
        }

        function applyRecurringExpenses() {
            if (recurringExpenses.length === 0) {
                alert('You have no recurring expenses saved. Mark an expense as recurring to save it.');
                return;
            }

            let addedCount = 0;
            const firstDayOfMonth = `${currentPayPeriod}-01`;

            recurringExpenses.forEach(recurring => {
                const isDuplicate = expenses.some(exp => 
                    exp.description === recurring.description && exp.amount === recurring.amount && exp.isRecurring
                );

                if (!isDuplicate) {
                    expenses.push({
                        ...recurring,
                        id: generateId(),
                        date: firstDayOfMonth,
                        isRecurring: true
                    });
                    addedCount++;
                }
            });

            if (addedCount > 0) {
                saveDataForPeriod(currentPayPeriod);
                displayExpenses();
                updateDashboard();
                showToast(`${addedCount} recurring expense(s) applied for this month.`);
            } else {
                showToast('All recurring expenses have already been applied for this month.');
            }
        }

        // --- COPY LAST MONTH FUNCTIONS ---
        function getPreviousMonthPeriod(period) {
            const [year, month] = period.split('-').map(Number);
            // Create date in local timezone by specifying hours, etc. to avoid timezone shifts.
            const date = new Date(year, month - 2, 1, 12, 0, 0); 
            return getMonthKey(date);
        }

        function copyLastMonthSalary(isSilent = false) {
            const prevPeriod = getPreviousMonthPeriod(currentPayPeriod);
            const prevSalaryData = localStorage.getItem(`salaryData_${prevPeriod}`);

            if (!prevSalaryData) {
                if (!isSilent) alert(`No salary data found for the previous month (${prevPeriod}).`);
                return false;
            }
            
            const proceed = isSilent ? true : confirm(`This will overwrite the current salary data with data from ${prevPeriod}. Continue?`);

            if (proceed) {
                salaryData = JSON.parse(prevSalaryData);
                delete salaryData.customOtStartDate;
                delete salaryData.customOtEndDate;
                
                saveDataForPeriod(currentPayPeriod);
                loadDataForPeriod(currentPayPeriod);
                autoCalculateDeductions();
                if (!isSilent) showToast(`Salary data from ${prevPeriod} has been copied.`);
                return true;
            }
            return false;
        }

        function copyLastMonthExpenses(isSilent = false) {
            const prevPeriod = getPreviousMonthPeriod(currentPayPeriod);
            const prevExpensesData = localStorage.getItem(`expenses_${prevPeriod}`);

            if (!prevExpensesData) {
                if (!isSilent) alert(`No expense data found for the previous month (${prevPeriod}).`);
                return false;
            }
            
            const proceed = isSilent ? true : confirm(`This will REPLACE all current expenses with the data from ${prevPeriod}. Continue?`);

            if (proceed) {
                const lastMonthExpenses = JSON.parse(prevExpensesData);
                const [currentYear, currentMonth] = currentPayPeriod.split('-').map(Number);
                
                expenses = lastMonthExpenses.map(exp => {
                    const oldDate = new Date(exp.date);
                    // Use UTC date parts to avoid timezone issues
                    const newDay = Math.min(oldDate.getUTCDate(), new Date(currentYear, currentMonth, 0).getDate());
                    const newDate = new Date(Date.UTC(currentYear, currentMonth - 1, newDay));
                    
                    return {
                        ...exp,
                        id: generateId(),
                        date: newDate.toISOString().split('T')[0]
                    };
                });

                saveDataForPeriod(currentPayPeriod);
                displayExpenses();
                updateDashboard();
                if (!isSilent) showToast(`Expenses from ${prevPeriod} have been copied.`);
                return true;
            }
            return false;
        }

        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('import-file').addEventListener('change', importData);
            
            // Setup listeners for savings goals inputs
            document.getElementById('targetSavings').addEventListener('input', updateAndSaveSavingsGoals);
            document.getElementById('emergencyFundGoal').addEventListener('input', updateAndSaveSavingsGoals);
            document.getElementById('currentEmergencyFund').addEventListener('input', updateAndSaveSavingsGoals);
            document.getElementById('expectedExpenses').addEventListener('input', () => {
                manualExpenseSet = true;
                updateAndSaveSavingsGoals();
            });

            initializeData();
            initializeSliders();
        });
    </script>
</body>
</html>
